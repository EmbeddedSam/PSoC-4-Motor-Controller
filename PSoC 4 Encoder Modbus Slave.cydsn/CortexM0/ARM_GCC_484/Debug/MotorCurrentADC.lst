ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"MotorCurrentADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	MotorCurrentADC_initVar
  18              		.bss
  19              		.type	MotorCurrentADC_initVar, %object
  20              		.size	MotorCurrentADC_initVar, 1
  21              	MotorCurrentADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	MotorCurrentADC_offset,2,4
  24              		.comm	MotorCurrentADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	MotorCurrentADC_channelsConfig, %object
  28              		.size	MotorCurrentADC_channelsConfig, 4
  29              	MotorCurrentADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.MotorCurrentADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	MotorCurrentADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	MotorCurrentADC_Start, %function
  37              	MotorCurrentADC_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\MotorCurrentADC.c"
   1:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * File Name: MotorCurrentADC.c
   3:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
   5:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Description:
   6:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
   9:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Note:
  10:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  11:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  18:.\Generated_Source\PSoC4/MotorCurrentADC.c **** #include "MotorCurrentADC.h"
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 2


  19:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  20:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  21:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/MotorCurrentADC.c **** uint8 MotorCurrentADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/MotorCurrentADC.c **** volatile int16 MotorCurrentADC_offset[MotorCurrentADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/MotorCurrentADC.c **** volatile int32 MotorCurrentADC_countsPer10Volt[MotorCurrentADC_TOTAL_CHANNELS_NUM];   /* Gain compe
  27:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  28:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  29:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/MotorCurrentADC.c **** static const uint32 CYCODE MotorCurrentADC_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  35:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  36:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_Start
  38:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  40:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  45:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
  47:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  48:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
  49:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
  50:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  51:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  The MotorCurrentADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_Start() routine.
  57:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  to zero before call of MotorCurrentADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_Init() and MotorCurrentADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_Start() routine.
  61:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  62:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_Start(void)
  64:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     if(MotorCurrentADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
  68:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	MotorCurrentADC_Init
  69:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
  71:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	MotorCurrentADC_Enable
  72:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	MotorCurrentADC_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	MotorCurrentADC_Start, .-MotorCurrentADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.MotorCurrentADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	MotorCurrentADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	MotorCurrentADC_Init, %function
  80              	MotorCurrentADC_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  74:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
  75:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_Init
  77:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  79:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_Start().
  83:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  84:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
  86:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  87:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
  88:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
  89:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  90:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Global variables:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 4


  91:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  The MotorCurrentADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
  93:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_Init(void)
  95:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 100:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         static const uint8 CYCODE MotorCurrentADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 103:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             (uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/MotorCurrentADC.c ****              (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 ,(uint8)(MotorCurrentADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (uint8)MotorCurrentADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         };
 136:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 5


 137:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 138:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         CyIntSetPriority(MotorCurrentADC_INTC_NUMBER, MotorCurrentADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         (void)CyIntSetVector(MotorCurrentADC_INTC_NUMBER, &MotorCurrentADC_ISR);
  97              		.loc 1 141 0
  98 000e 4E4B     		ldr	r3, .L14
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif   /* End MotorCurrentADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 144:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_CHAN_EN_REG = MotorCurrentADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 4C4B     		ldr	r3, .L14+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_CTRL_REG = MotorCurrentADC_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 4C4B     		ldr	r3, .L14+8
 108 0020 4C4A     		ldr	r2, .L14+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_SAMPLE_CTRL_REG = MotorCurrentADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 4C4B     		ldr	r3, .L14+16
 112 0026 4D4A     		ldr	r2, .L14+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_THRES_REG = MotorCurrentADC_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 4D4B     		ldr	r3, .L14+24
 116 002c 4D4A     		ldr	r2, .L14+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_COND_REG  = MotorCurrentADC_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 4D4B     		ldr	r3, .L14+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_SAMPLE_TIME01_REG = MotorCurrentADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 4D4B     		ldr	r3, .L14+36
 124 0038 4D4A     		ldr	r2, .L14+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_SAMPLE_TIME23_REG = MotorCurrentADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 4D4B     		ldr	r3, .L14+44
 128 003e 4C4A     		ldr	r2, .L14+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     
 153:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_MUX_SWITCH0_REG |= MotorCurrentADC_DEFAULT_MUX_SWITCH0;
 130              		.loc 1 155 0
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 6


 131 0042 4D4B     		ldr	r3, .L14+48
 132 0044 4C4A     		ldr	r2, .L14+48
 133 0046 1268     		ldr	r2, [r2]
 134 0048 8021     		mov	r1, #128
 135 004a 4902     		lsl	r1, r1, #9
 136 004c 0A43     		orr	r2, r1
 137 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             MotorCurrentADC_MUX_SWITCH_HW_CTRL_REG |= MotorCurrentADC_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /*MotorCurrentADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 162:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 138              		.loc 1 162 0
 139 0050 4A4B     		ldr	r3, .L14+52
 140 0052 0022     		mov	r2, #0
 141 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_INTR_MASK_REG = 0u;
 142              		.loc 1 163 0
 143 0056 4A4B     		ldr	r3, .L14+56
 144 0058 0022     		mov	r2, #0
 145 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_INTR_MASK_REG = MotorCurrentADC_SAR_INTR_MASK;
 146              		.loc 1 164 0
 147 005c 494B     		ldr	r3, .L14+60
 148 005e 0122     		mov	r2, #1
 149 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 166:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_CY_SAR_IP_VER == MotorCurrentADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_ANA_TRIM_REG = MotorCurrentADC_TRIM_COEF;
 150              		.loc 1 167 0
 151 0062 494B     		ldr	r3, .L14+64
 152 0064 0222     		mov	r2, #2
 153 0066 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* (MotorCurrentADC_CY_SAR_IP_VER == MotorCurrentADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 170:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     tmpRegVal = MotorCurrentADC_SAR_DFT_CTRL_REG;
 154              		.loc 1 171 0
 155 0068 484B     		ldr	r3, .L14+68
 156 006a 1B68     		ldr	r3, [r3]
 157 006c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     tmpRegVal &= (uint32)~MotorCurrentADC_DCEN;
 158              		.loc 1 172 0
 159 006e 7A68     		ldr	r2, [r7, #4]
 160 0070 474B     		ldr	r3, .L14+72
 161 0072 1340     		and	r3, r2
 162 0074 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     
 174:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_CY_SAR_IP_VER == MotorCurrentADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_NOMINAL_CLOCK_FREQ > (MotorCurrentADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal |= MotorCurrentADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal |= MotorCurrentADC_DLY_INC;
 163              		.loc 1 178 0
 164 0076 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 7


 165 0078 0122     		mov	r2, #1
 166 007a 1343     		orr	r3, r2
 167 007c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #else
 181:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if ((MotorCurrentADC_DEFAULT_VREF_SEL == MotorCurrentADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/MotorCurrentADC.c ****              (MotorCurrentADC_DEFAULT_VREF_SEL == MotorCurrentADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal |= MotorCurrentADC_DLY_INC;
 184:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #else
 185:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal |= MotorCurrentADC_DCEN;
 186:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal &= (uint32)~MotorCurrentADC_DLY_INC;
 187:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* ((MotorCurrentADC_DEFAULT_VREF_SEL == MotorCurrentADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                    (MotorCurrentADC_DEFAULT_VREF_SEL == MotorCurrentADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* (MotorCurrentADC_CY_SAR_IP_VER == MotorCurrentADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     
 191:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_DFT_CTRL_REG = tmpRegVal;
 168              		.loc 1 191 0
 169 007e 434B     		ldr	r3, .L14+68
 170 0080 7A68     		ldr	r2, [r7, #4]
 171 0082 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 193:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_MAX_RESOLUTION != MotorCurrentADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_WOUNDING_REG = MotorCurrentADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* MotorCurrentADC_MAX_RESOLUTION != MotorCurrentADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 197:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     for(chNum = 0u; chNum < MotorCurrentADC_TOTAL_CHANNELS_NUM; chNum++)
 172              		.loc 1 197 0
 173 0084 0023     		mov	r3, #0
 174 0086 FB60     		str	r3, [r7, #12]
 175 0088 57E0     		b	.L6
 176              	.L13:
 198:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 199:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         tmpRegVal = (MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_CHANNEL_CONFIG_MASK);
 177              		.loc 1 199 0
 178 008a 0022     		mov	r2, #0
 179 008c DC23     		mov	r3, #220
 180 008e 9B01     		lsl	r3, r3, #6
 181 0090 1340     		and	r3, r2
 182 0092 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal |= MotorCurrentADC_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* End MotorCurrentADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         
 204:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         
 205:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         */
 209:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if((MotorCurrentADC_MAX_RESOLUTION != MotorCurrentADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             (MotorCurrentADC_ALT_WOUNDING == MotorCurrentADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             tmpRegVal &= (uint32)(~MotorCurrentADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_MAX_RESOLUTION != MotorCurrentADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 214:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         if(chNum < MotorCurrentADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 8


 218:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             CY_SET_REG32((reg32 *)(MotorCurrentADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmp
 183              		.loc 1 218 0
 184 0094 FB68     		ldr	r3, [r7, #12]
 185 0096 9B00     		lsl	r3, r3, #2
 186 0098 3E4A     		ldr	r2, .L14+76
 187 009a 9B18     		add	r3, r3, r2
 188 009c 7A68     		ldr	r2, [r7, #4]
 189 009e 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 220:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_IS_SATURATE_EN_MASK) != 0u)
 190              		.loc 1 220 0
 191 00a0 0022     		mov	r2, #0
 192 00a2 0123     		mov	r3, #1
 193 00a4 1340     		and	r3, r2
 194 00a6 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 222:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 195              		.loc 1 222 0
 196 00a8 344B     		ldr	r3, .L14+52
 197 00aa 344A     		ldr	r2, .L14+52
 198 00ac 1168     		ldr	r1, [r2]
 199 00ae FA68     		ldr	r2, [r7, #12]
 200 00b0 0120     		mov	r0, #1
 201 00b2 041C     		mov	r4, r0
 202 00b4 9440     		lsl	r4, r4, r2
 203 00b6 221C     		mov	r2, r4
 204 00b8 92B2     		uxth	r2, r2
 205 00ba 0A43     		orr	r2, r1
 206 00bc 1A60     		str	r2, [r3]
 207              	.L7:
 223:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 224:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 225:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_IS_RANGE_CTRL_EN_MASK) != 0
 208              		.loc 1 225 0
 209 00be 0022     		mov	r2, #0
 210 00c0 0223     		mov	r3, #2
 211 00c2 1340     		and	r3, r2
 212 00c4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 227:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 213              		.loc 1 227 0
 214 00c6 2E4B     		ldr	r3, .L14+56
 215 00c8 2D4A     		ldr	r2, .L14+56
 216 00ca 1168     		ldr	r1, [r2]
 217 00cc FA68     		ldr	r2, [r7, #12]
 218 00ce 0120     		mov	r0, #1
 219 00d0 041C     		mov	r4, r0
 220 00d2 9440     		lsl	r4, r4, r2
 221 00d4 221C     		mov	r2, r4
 222 00d6 92B2     		uxth	r2, r2
 223 00d8 0A43     		orr	r2, r1
 224 00da 1A60     		str	r2, [r3]
 225              	.L8:
 228:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 229:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 230:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             else
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 9


 232:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 233:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 CY_SET_REG32(MotorCurrentADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | MotorCurrentADC_I
 234:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 235:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_IS_SATURATE_EN_MASK) !=
 236:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 {
 237:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                     MotorCurrentADC_SAR_INTR_MASK_REG |= MotorCurrentADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 }
 239:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 240:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_IS_RANGE_CTRL_EN_MASK) 
 241:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 {
 242:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                     MotorCurrentADC_SAR_INTR_MASK_REG |= MotorCurrentADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 }
 244:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 245:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 247:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_ALT_RESOLUTION_ON) != 0u)
 226              		.loc 1 247 0
 227 00dc 0022     		mov	r2, #0
 228 00de 8023     		mov	r3, #128
 229 00e0 9B00     		lsl	r3, r3, #2
 230 00e2 1340     		and	r3, r2
 231 00e4 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 249:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                counts = (int32)MotorCurrentADC_DEFAULT_MAX_WRK_ALT;
 232              		.loc 1 249 0
 233 00e6 8023     		mov	r3, #128
 234 00e8 5B00     		lsl	r3, r3, #1
 235 00ea BB60     		str	r3, [r7, #8]
 236 00ec 02E0     		b	.L10
 237              	.L9:
 250:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 251:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         else
 252:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 253:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                counts = (int32)MotorCurrentADC_SAR_WRK_MAX_12BIT;
 238              		.loc 1 253 0
 239 00ee 8023     		mov	r3, #128
 240 00f0 5B01     		lsl	r3, r3, #5
 241 00f2 BB60     		str	r3, [r7, #8]
 242              	.L10:
 254:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 255:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 256:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         if((MotorCurrentADC_channelsConfig[chNum] & MotorCurrentADC_DIFFERENTIAL_EN) == 0u)
 243              		.loc 1 256 0
 244 00f4 0022     		mov	r2, #0
 245 00f6 8023     		mov	r3, #128
 246 00f8 5B00     		lsl	r3, r3, #1
 247 00fa 1340     		and	r3, r2
 248 00fc 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 258:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if((MotorCurrentADC_DEFAULT_SE_RESULT_FORMAT_SEL == MotorCurrentADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 (MotorCurrentADC_DEFAULT_NEG_INPUT_SEL == MotorCurrentADC__VREF))
 260:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #else
 263:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_offset[chNum] = 0;
 249              		.loc 1 263 0
 250 00fe 264B     		ldr	r3, .L14+80
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 10


 251 0100 FA68     		ldr	r2, [r7, #12]
 252 0102 5200     		lsl	r2, r2, #1
 253 0104 0021     		mov	r1, #0
 254 0106 D152     		strh	r1, [r2, r3]
 255 0108 04E0     		b	.L12
 256              	.L11:
 264:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == MotorCurrentADC__FSIGNED */
 265:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 266:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 268:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #if(MotorCurrentADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == MotorCurrentADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #else
 272:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_offset[chNum] = 0;
 257              		.loc 1 272 0
 258 010a 234B     		ldr	r3, .L14+80
 259 010c FA68     		ldr	r2, [r7, #12]
 260 010e 5200     		lsl	r2, r2, #1
 261 0110 0021     		mov	r1, #0
 262 0112 D152     		strh	r1, [r2, r3]
 263              	.L12:
 273:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             #endif /* end MotorCurrentADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == MotorCurrentADC__FUNSIG
 274:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 275:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_countsPer10Volt[chNum] = (int16)(((counts * MotorCurrentADC_10MV_COUNTS) +
 264              		.loc 1 276 0
 265 0114 BB68     		ldr	r3, [r7, #8]
 266 0116 214A     		ldr	r2, .L14+84
 267 0118 5343     		mul	r3, r2
 268 011a 214A     		ldr	r2, .L14+88
 269 011c 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                             MotorCurrentADC_DEFAULT_VREF_MV_VALUE) / (MotorCurrentADC_DEFAULT_VREF_
 270              		.loc 1 277 0
 271 011e 181C     		mov	r0, r3
 272 0120 1E49     		ldr	r1, .L14+84
 273 0122 FFF7FEFF 		bl	__aeabi_idiv
 274 0126 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_countsPer10Volt[chNum] = (int16)(((counts * MotorCurrentADC_10MV_COUNTS) +
 275              		.loc 1 276 0
 276 0128 9BB2     		uxth	r3, r3
 277 012a 19B2     		sxth	r1, r3
 278 012c 1D4B     		ldr	r3, .L14+92
 279 012e FA68     		ldr	r2, [r7, #12]
 280 0130 9200     		lsl	r2, r2, #2
 281 0132 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     for(chNum = 0u; chNum < MotorCurrentADC_TOTAL_CHANNELS_NUM; chNum++)
 282              		.loc 1 197 0
 283 0134 FB68     		ldr	r3, [r7, #12]
 284 0136 0133     		add	r3, r3, #1
 285 0138 FB60     		str	r3, [r7, #12]
 286              	.L6:
 197:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     for(chNum = 0u; chNum < MotorCurrentADC_TOTAL_CHANNELS_NUM; chNum++)
 287              		.loc 1 197 0 is_stmt 0 discriminator 1
 288 013a FB68     		ldr	r3, [r7, #12]
 289 013c 002B     		cmp	r3, #0
 290 013e A4D0     		beq	.L13
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 11


 278:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 279:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 291              		.loc 1 279 0 is_stmt 1
 292 0140 BD46     		mov	sp, r7
 293 0142 05B0     		add	sp, sp, #20
 294              		@ sp needed
 295 0144 90BD     		pop	{r4, r7, pc}
 296              	.L15:
 297 0146 C046     		.align	2
 298              	.L14:
 299 0148 00000000 		.word	MotorCurrentADC_ISR
 300 014c 20001A40 		.word	1075445792
 301 0150 00001A40 		.word	1075445760
 302 0154 70020053 		.word	1392509552
 303 0158 04001A40 		.word	1075445764
 304 015c AC000080 		.word	-2147483476
 305 0160 18001A40 		.word	1075445784
 306 0164 0000FF07 		.word	134152192
 307 0168 1C001A40 		.word	1075445788
 308 016c 10001A40 		.word	1075445776
 309 0170 04000400 		.word	262148
 310 0174 14001A40 		.word	1075445780
 311 0178 00031A40 		.word	1075446528
 312 017c 28021A40 		.word	1075446312
 313 0180 38021A40 		.word	1075446328
 314 0184 18021A40 		.word	1075446296
 315 0188 000F1A40 		.word	1075449600
 316 018c 30001A40 		.word	1075445808
 317 0190 FFFFFFDF 		.word	-536870913
 318 0194 80001A40 		.word	1075445888
 319 0198 00000000 		.word	MotorCurrentADC_offset
 320 019c 10270000 		.word	10000
 321 01a0 88130000 		.word	5000
 322 01a4 00000000 		.word	MotorCurrentADC_countsPer10Volt
 323              		.cfi_endproc
 324              	.LFE1:
 325              		.size	MotorCurrentADC_Init, .-MotorCurrentADC_Init
 326              		.section	.text.MotorCurrentADC_Enable,"ax",%progbits
 327              		.align	2
 328              		.global	MotorCurrentADC_Enable
 329              		.code	16
 330              		.thumb_func
 331              		.type	MotorCurrentADC_Enable, %function
 332              	MotorCurrentADC_Enable:
 333              	.LFB2:
 280:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 281:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 285:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 288:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 290:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 291:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 12


 292:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 293:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 294:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_Enable(void)
 296:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 334              		.loc 1 296 0
 335              		.cfi_startproc
 336 0000 80B5     		push	{r7, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 7, -8
 339              		.cfi_offset 14, -4
 340 0002 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     if (0u == (MotorCurrentADC_SAR_CTRL_REG & MotorCurrentADC_ENABLE))
 342              		.loc 1 297 0
 343 0004 074B     		ldr	r3, .L18
 344 0006 1B68     		ldr	r3, [r3]
 345 0008 002B     		cmp	r3, #0
 346 000a 09DB     		blt	.L16
 298:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 299:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_CY_SAR_IP_VER != MotorCurrentADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 301:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             while (0u != (MotorCurrentADC_SAR_STATUS_REG & MotorCurrentADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 303:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 305:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* (MotorCurrentADC_CY_SAR_IP_VER != MotorCurrentADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         
 307:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_SAR_CTRL_REG |= MotorCurrentADC_ENABLE;
 347              		.loc 1 307 0
 348 000c 054B     		ldr	r3, .L18
 349 000e 054A     		ldr	r2, .L18
 350 0010 1268     		ldr	r2, [r2]
 351 0012 8021     		mov	r1, #128
 352 0014 0906     		lsl	r1, r1, #24
 353 0016 0A43     		orr	r2, r1
 354 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         
 309:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         CyDelayUs(MotorCurrentADC_10US_DELAY);         
 355              		.loc 1 310 0
 356 001a 0A20     		mov	r0, #10
 357 001c FFF7FEFF 		bl	CyDelayUs
 358              	.L16:
 311:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 312:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 359              		.loc 1 312 0
 360 0020 BD46     		mov	sp, r7
 361              		@ sp needed
 362 0022 80BD     		pop	{r7, pc}
 363              	.L19:
 364              		.align	2
 365              	.L18:
 366 0024 00001A40 		.word	1075445760
 367              		.cfi_endproc
 368              	.LFE2:
 369              		.size	MotorCurrentADC_Enable, .-MotorCurrentADC_Enable
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 13


 370              		.section	.text.MotorCurrentADC_Stop,"ax",%progbits
 371              		.align	2
 372              		.global	MotorCurrentADC_Stop
 373              		.code	16
 374              		.thumb_func
 375              		.type	MotorCurrentADC_Stop, %function
 376              	MotorCurrentADC_Stop:
 377              	.LFB3:
 313:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 314:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 315:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_Stop
 317:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 319:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 323:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 325:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 326:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 327:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 328:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 329:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_Stop(void)
 331:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 378              		.loc 1 331 0
 379              		.cfi_startproc
 380 0000 80B5     		push	{r7, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_CTRL_REG &= (uint32)~MotorCurrentADC_ENABLE;
 386              		.loc 1 332 0
 387 0004 034B     		ldr	r3, .L21
 388 0006 034A     		ldr	r2, .L21
 389 0008 1268     		ldr	r2, [r2]
 390 000a 5200     		lsl	r2, r2, #1
 391 000c 5208     		lsr	r2, r2, #1
 392 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 393              		.loc 1 333 0
 394 0010 BD46     		mov	sp, r7
 395              		@ sp needed
 396 0012 80BD     		pop	{r7, pc}
 397              	.L22:
 398              		.align	2
 399              	.L21:
 400 0014 00001A40 		.word	1075445760
 401              		.cfi_endproc
 402              	.LFE3:
 403              		.size	MotorCurrentADC_Stop, .-MotorCurrentADC_Stop
 404              		.section	.text.MotorCurrentADC_StartConvert,"ax",%progbits
 405              		.align	2
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 14


 406              		.global	MotorCurrentADC_StartConvert
 407              		.code	16
 408              		.thumb_func
 409              		.type	MotorCurrentADC_StartConvert, %function
 410              	MotorCurrentADC_StartConvert:
 411              	.LFB4:
 334:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 335:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 336:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_StartConvert
 338:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 340:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 345:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 349:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 351:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 352:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 353:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 354:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 355:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 412              		.loc 1 357 0
 413              		.cfi_startproc
 414 0000 80B5     		push	{r7, lr}
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418 0002 00AF     		add	r7, sp, #0
 419              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_DEFAULT_SAMPLE_MODE_SEL == MotorCurrentADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_SAR_SAMPLE_CTRL_REG |= MotorCurrentADC_CONTINUOUS_EN;
 420              		.loc 1 359 0
 421 0004 044B     		ldr	r3, .L24
 422 0006 044A     		ldr	r2, .L24
 423 0008 1268     		ldr	r2, [r2]
 424 000a 8021     		mov	r1, #128
 425 000c 4902     		lsl	r1, r1, #9
 426 000e 0A43     		orr	r2, r1
 427 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_SAR_START_CTRL_REG = MotorCurrentADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* End MotorCurrentADC_DEFAULT_SAMPLE_MODE == MotorCurrentADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 364:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 428              		.loc 1 364 0
 429 0012 BD46     		mov	sp, r7
 430              		@ sp needed
 431 0014 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 15


 432              	.L25:
 433 0016 C046     		.align	2
 434              	.L24:
 435 0018 04001A40 		.word	1075445764
 436              		.cfi_endproc
 437              	.LFE4:
 438              		.size	MotorCurrentADC_StartConvert, .-MotorCurrentADC_StartConvert
 439              		.section	.text.MotorCurrentADC_StopConvert,"ax",%progbits
 440              		.align	2
 441              		.global	MotorCurrentADC_StopConvert
 442              		.code	16
 443              		.thumb_func
 444              		.type	MotorCurrentADC_StopConvert, %function
 445              	MotorCurrentADC_StopConvert:
 446              	.LFB5:
 365:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 366:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 367:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_StopConvert
 369:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 371:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 374:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 376:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 377:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 378:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 379:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 380:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 447              		.loc 1 382 0
 448              		.cfi_startproc
 449 0000 80B5     		push	{r7, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_DEFAULT_SAMPLE_MODE_SEL == MotorCurrentADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~MotorCurrentADC_CONTINUOUS_EN);
 455              		.loc 1 384 0
 456 0004 034B     		ldr	r3, .L27
 457 0006 034A     		ldr	r2, .L27
 458 0008 1168     		ldr	r1, [r2]
 459 000a 034A     		ldr	r2, .L27+4
 460 000c 0A40     		and	r2, r1
 461 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* MotorCurrentADC_DEFAULT_SAMPLE_MODE == MotorCurrentADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 462              		.loc 1 386 0
 463 0010 BD46     		mov	sp, r7
 464              		@ sp needed
 465 0012 80BD     		pop	{r7, pc}
 466              	.L28:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 16


 467              		.align	2
 468              	.L27:
 469 0014 04001A40 		.word	1075445764
 470 0018 FFFFFEFF 		.word	-65537
 471              		.cfi_endproc
 472              	.LFE5:
 473              		.size	MotorCurrentADC_StopConvert, .-MotorCurrentADC_StopConvert
 474              		.section	.text.MotorCurrentADC_IsEndConversion,"ax",%progbits
 475              		.align	2
 476              		.global	MotorCurrentADC_IsEndConversion
 477              		.code	16
 478              		.thumb_func
 479              		.type	MotorCurrentADC_IsEndConversion, %function
 480              	MotorCurrentADC_IsEndConversion:
 481              	.LFB6:
 387:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 388:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 389:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_IsEndConversion
 391:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 393:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 402:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 410:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 411:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 414:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/MotorCurrentADC.c **** uint32 MotorCurrentADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 482              		.loc 1 416 0
 483              		.cfi_startproc
 484 0000 80B5     		push	{r7, lr}
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 84B0     		sub	sp, sp, #16
 489              		.cfi_def_cfa_offset 24
 490 0004 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 492 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     uint32 status = 0u;
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 17


 493              		.loc 1 417 0
 494 0008 0023     		mov	r3, #0
 495 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 419:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     if((retMode & (MotorCurrentADC_RETURN_STATUS | MotorCurrentADC_WAIT_FOR_RESULT)) != 0u)
 496              		.loc 1 419 0
 497 000c 7A68     		ldr	r2, [r7, #4]
 498 000e 0323     		mov	r3, #3
 499 0010 1340     		and	r3, r2
 500 0012 11D0     		beq	.L30
 501              	.L32:
 420:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 421:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         do
 422:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 423:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             status = MotorCurrentADC_SAR_INTR_REG & MotorCurrentADC_EOS_MASK;
 502              		.loc 1 423 0 discriminator 1
 503 0014 0B4B     		ldr	r3, .L34
 504 0016 1A68     		ldr	r2, [r3]
 505 0018 0123     		mov	r3, #1
 506 001a 1340     		and	r3, r2
 507 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }while((status == 0u) && ((retMode & MotorCurrentADC_WAIT_FOR_RESULT) != 0u));
 508              		.loc 1 424 0 discriminator 1
 509 001e FB68     		ldr	r3, [r7, #12]
 510 0020 002B     		cmp	r3, #0
 511 0022 03D1     		bne	.L31
 512 0024 7A68     		ldr	r2, [r7, #4]
 513 0026 0223     		mov	r3, #2
 514 0028 1340     		and	r3, r2
 515 002a F3D1     		bne	.L32
 516              	.L31:
 425:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 426:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         if(status != 0u)
 517              		.loc 1 426 0
 518 002c FB68     		ldr	r3, [r7, #12]
 519 002e 002B     		cmp	r3, #0
 520 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 428:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             MotorCurrentADC_SAR_INTR_REG = MotorCurrentADC_EOS_MASK;
 521              		.loc 1 429 0
 522 0032 044B     		ldr	r3, .L34
 523 0034 0122     		mov	r2, #1
 524 0036 1A60     		str	r2, [r3]
 525              	.L30:
 430:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 431:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 432:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 433:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #if(MotorCurrentADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         if((retMode & (MotorCurrentADC_RETURN_STATUS_INJ | MotorCurrentADC_WAIT_FOR_RESULT_INJ)) !=
 435:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         {
 436:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             do
 437:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 438:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 status |= MotorCurrentADC_SAR_INTR_REG & MotorCurrentADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }while(((status & MotorCurrentADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                    ((retMode & MotorCurrentADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 18


 442:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((status & MotorCurrentADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 444:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_SAR_INTR_REG = MotorCurrentADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 447:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         }
 448:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     #endif /* MotorCurrentADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 450:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     return (status);
 526              		.loc 1 450 0
 527 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 528              		.loc 1 451 0
 529 003a 181C     		mov	r0, r3
 530 003c BD46     		mov	sp, r7
 531 003e 04B0     		add	sp, sp, #16
 532              		@ sp needed
 533 0040 80BD     		pop	{r7, pc}
 534              	.L35:
 535 0042 C046     		.align	2
 536              	.L34:
 537 0044 10021A40 		.word	1075446288
 538              		.cfi_endproc
 539              	.LFE6:
 540              		.size	MotorCurrentADC_IsEndConversion, .-MotorCurrentADC_IsEndConversion
 541              		.section	.text.MotorCurrentADC_GetResult16,"ax",%progbits
 542              		.align	2
 543              		.global	MotorCurrentADC_GetResult16
 544              		.code	16
 545              		.thumb_func
 546              		.type	MotorCurrentADC_GetResult16, %function
 547              	MotorCurrentADC_GetResult16:
 548              	.LFB7:
 452:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 453:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 454:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_GetResult16
 456:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 458:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 461:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 465:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 466:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 468:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/MotorCurrentADC.c **** int16 MotorCurrentADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 549              		.loc 1 470 0
 550              		.cfi_startproc
 551 0000 80B5     		push	{r7, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 19


 554              		.cfi_offset 14, -4
 555 0002 84B0     		sub	sp, sp, #16
 556              		.cfi_def_cfa_offset 24
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 473:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
 560              		.loc 1 474 0
 561 0008 7B68     		ldr	r3, [r7, #4]
 562 000a 002B     		cmp	r3, #0
 563 000c 02D0     		beq	.L37
 564              		.loc 1 474 0 is_stmt 0 discriminator 1
 565 000e 0020     		mov	r0, #0
 566 0010 FFF7FEFF 		bl	CyHalt
 567              	.L37:
 475:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 476:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     if(chan < MotorCurrentADC_SEQUENCED_CHANNELS_NUM)
 568              		.loc 1 476 0 is_stmt 1
 569 0014 7B68     		ldr	r3, [r7, #4]
 570 0016 002B     		cmp	r3, #0
 571 0018 08D1     		bne	.L38
 477:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 478:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         result = CY_GET_REG32((reg32 *)(MotorCurrentADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))
 572              		.loc 1 478 0
 573 001a 7B68     		ldr	r3, [r7, #4]
 574 001c 9B00     		lsl	r3, r3, #2
 575 001e 084A     		ldr	r2, .L41
 576 0020 9B18     		add	r3, r3, r2
 577 0022 1B68     		ldr	r3, [r3]
 578 0024 1B04     		lsl	r3, r3, #16
 579 0026 1B0C     		lsr	r3, r3, #16
 580 0028 FB60     		str	r3, [r7, #12]
 581 002a 01E0     		b	.L39
 582              	.L38:
 479:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 MotorCurrentADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 481:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     else
 482:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 483:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             result = MotorCurrentADC_SAR_INJ_RESULT_REG & MotorCurrentADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #else
 486:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             result = 0u;
 583              		.loc 1 486 0
 584 002c 0023     		mov	r3, #0
 585 002e FB60     		str	r3, [r7, #12]
 586              	.L39:
 487:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 489:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 490:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     return ( (int16)result );
 587              		.loc 1 490 0
 588 0030 FB68     		ldr	r3, [r7, #12]
 589 0032 9BB2     		uxth	r3, r3
 590 0034 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 20


 491:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 591              		.loc 1 491 0
 592 0036 181C     		mov	r0, r3
 593 0038 BD46     		mov	sp, r7
 594 003a 04B0     		add	sp, sp, #16
 595              		@ sp needed
 596 003c 80BD     		pop	{r7, pc}
 597              	.L42:
 598 003e C046     		.align	2
 599              	.L41:
 600 0040 80011A40 		.word	1075446144
 601              		.cfi_endproc
 602              	.LFE7:
 603              		.size	MotorCurrentADC_GetResult16, .-MotorCurrentADC_GetResult16
 604              		.section	.text.MotorCurrentADC_SetChanMask,"ax",%progbits
 605              		.align	2
 606              		.global	MotorCurrentADC_SetChanMask
 607              		.code	16
 608              		.thumb_func
 609              		.type	MotorCurrentADC_SetChanMask, %function
 610              	MotorCurrentADC_SetChanMask:
 611              	.LFB8:
 492:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 493:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 494:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetChanMask
 496:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 498:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 501:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 510:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 511:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 512:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 513:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 612              		.loc 1 515 0
 613              		.cfi_startproc
 614 0000 80B5     		push	{r7, lr}
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 82B0     		sub	sp, sp, #8
 619              		.cfi_def_cfa_offset 16
 620 0004 00AF     		add	r7, sp, #0
 621              		.cfi_def_cfa_register 7
 622 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 21


 516:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_CHAN_EN_REG = mask & MotorCurrentADC_MAX_CHANNELS_EN_MASK;
 623              		.loc 1 516 0
 624 0008 034B     		ldr	r3, .L44
 625 000a 7968     		ldr	r1, [r7, #4]
 626 000c 0122     		mov	r2, #1
 627 000e 0A40     		and	r2, r1
 628 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 629              		.loc 1 517 0
 630 0012 BD46     		mov	sp, r7
 631 0014 02B0     		add	sp, sp, #8
 632              		@ sp needed
 633 0016 80BD     		pop	{r7, pc}
 634              	.L45:
 635              		.align	2
 636              	.L44:
 637 0018 20001A40 		.word	1075445792
 638              		.cfi_endproc
 639              	.LFE8:
 640              		.size	MotorCurrentADC_SetChanMask, .-MotorCurrentADC_SetChanMask
 641              		.section	.text.MotorCurrentADC_SetLowLimit,"ax",%progbits
 642              		.align	2
 643              		.global	MotorCurrentADC_SetLowLimit
 644              		.code	16
 645              		.thumb_func
 646              		.type	MotorCurrentADC_SetLowLimit, %function
 647              	MotorCurrentADC_SetLowLimit:
 648              	.LFB9:
 518:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 519:.\Generated_Source\PSoC4/MotorCurrentADC.c **** #if(MotorCurrentADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 521:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 522:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Function Name: MotorCurrentADC_EnableInjection
 524:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 526:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 529:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 532:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 535:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     void MotorCurrentADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 538:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         MotorCurrentADC_SAR_INJ_CHAN_CONFIG_REG |= MotorCurrentADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 540:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 541:.\Generated_Source\PSoC4/MotorCurrentADC.c **** #endif /* MotorCurrentADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 543:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 544:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetLowLimit
 546:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 22


 547:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 548:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 551:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 554:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 555:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 556:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 557:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 649              		.loc 1 559 0
 650              		.cfi_startproc
 651 0000 80B5     		push	{r7, lr}
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 82B0     		sub	sp, sp, #8
 656              		.cfi_def_cfa_offset 16
 657 0004 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 659 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_THRES_REG &= (uint32)(~MotorCurrentADC_RANGE_LOW_MASK);
 660              		.loc 1 560 0
 661 0008 084B     		ldr	r3, .L47
 662 000a 084A     		ldr	r2, .L47
 663 000c 1268     		ldr	r2, [r2]
 664 000e 120C     		lsr	r2, r2, #16
 665 0010 1204     		lsl	r2, r2, #16
 666 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_THRES_REG |= lowLimit & MotorCurrentADC_RANGE_LOW_MASK;
 667              		.loc 1 561 0
 668 0014 054B     		ldr	r3, .L47
 669 0016 054A     		ldr	r2, .L47
 670 0018 1168     		ldr	r1, [r2]
 671 001a 7A68     		ldr	r2, [r7, #4]
 672 001c 1204     		lsl	r2, r2, #16
 673 001e 120C     		lsr	r2, r2, #16
 674 0020 0A43     		orr	r2, r1
 675 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 676              		.loc 1 562 0
 677 0024 BD46     		mov	sp, r7
 678 0026 02B0     		add	sp, sp, #8
 679              		@ sp needed
 680 0028 80BD     		pop	{r7, pc}
 681              	.L48:
 682 002a C046     		.align	2
 683              	.L47:
 684 002c 18001A40 		.word	1075445784
 685              		.cfi_endproc
 686              	.LFE9:
 687              		.size	MotorCurrentADC_SetLowLimit, .-MotorCurrentADC_SetLowLimit
 688              		.section	.text.MotorCurrentADC_SetHighLimit,"ax",%progbits
 689              		.align	2
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 23


 690              		.global	MotorCurrentADC_SetHighLimit
 691              		.code	16
 692              		.thumb_func
 693              		.type	MotorCurrentADC_SetHighLimit, %function
 694              	MotorCurrentADC_SetHighLimit:
 695              	.LFB10:
 563:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 564:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 565:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetHighLimit
 567:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 569:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 572:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 575:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 576:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 577:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 578:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 696              		.loc 1 580 0
 697              		.cfi_startproc
 698 0000 80B5     		push	{r7, lr}
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 0002 82B0     		sub	sp, sp, #8
 703              		.cfi_def_cfa_offset 16
 704 0004 00AF     		add	r7, sp, #0
 705              		.cfi_def_cfa_register 7
 706 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_THRES_REG &= (uint32)(~MotorCurrentADC_RANGE_HIGH_MASK);
 707              		.loc 1 581 0
 708 0008 074B     		ldr	r3, .L50
 709 000a 074A     		ldr	r2, .L50
 710 000c 1268     		ldr	r2, [r2]
 711 000e 1204     		lsl	r2, r2, #16
 712 0010 120C     		lsr	r2, r2, #16
 713 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << MotorCurrentADC_RANGE_HIGH_OFFSET)
 714              		.loc 1 582 0
 715 0014 044B     		ldr	r3, .L50
 716 0016 044A     		ldr	r2, .L50
 717 0018 1168     		ldr	r1, [r2]
 718 001a 7A68     		ldr	r2, [r7, #4]
 719 001c 1204     		lsl	r2, r2, #16
 720 001e 0A43     		orr	r2, r1
 721 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 722              		.loc 1 583 0
 723 0022 BD46     		mov	sp, r7
 724 0024 02B0     		add	sp, sp, #8
 725              		@ sp needed
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 24


 726 0026 80BD     		pop	{r7, pc}
 727              	.L51:
 728              		.align	2
 729              	.L50:
 730 0028 18001A40 		.word	1075445784
 731              		.cfi_endproc
 732              	.LFE10:
 733              		.size	MotorCurrentADC_SetHighLimit, .-MotorCurrentADC_SetHighLimit
 734              		.section	.text.MotorCurrentADC_SetLimitMask,"ax",%progbits
 735              		.align	2
 736              		.global	MotorCurrentADC_SetLimitMask
 737              		.code	16
 738              		.thumb_func
 739              		.type	MotorCurrentADC_SetLimitMask, %function
 740              	MotorCurrentADC_SetLimitMask:
 741              	.LFB11:
 584:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 585:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 586:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetLimitMask
 588:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 590:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 593:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 599:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 600:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 601:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 602:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 742              		.loc 1 604 0
 743              		.cfi_startproc
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 82B0     		sub	sp, sp, #8
 749              		.cfi_def_cfa_offset 16
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_RANGE_INTR_MASK_REG = mask & MotorCurrentADC_MAX_CHANNELS_EN_MASK;
 753              		.loc 1 605 0
 754 0008 034B     		ldr	r3, .L53
 755 000a 7968     		ldr	r1, [r7, #4]
 756 000c 0122     		mov	r2, #1
 757 000e 0A40     		and	r2, r1
 758 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 759              		.loc 1 606 0
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 25


 760 0012 BD46     		mov	sp, r7
 761 0014 02B0     		add	sp, sp, #8
 762              		@ sp needed
 763 0016 80BD     		pop	{r7, pc}
 764              	.L54:
 765              		.align	2
 766              	.L53:
 767 0018 38021A40 		.word	1075446328
 768              		.cfi_endproc
 769              	.LFE11:
 770              		.size	MotorCurrentADC_SetLimitMask, .-MotorCurrentADC_SetLimitMask
 771              		.section	.text.MotorCurrentADC_SetSatMask,"ax",%progbits
 772              		.align	2
 773              		.global	MotorCurrentADC_SetSatMask
 774              		.code	16
 775              		.thumb_func
 776              		.type	MotorCurrentADC_SetSatMask, %function
 777              	MotorCurrentADC_SetSatMask:
 778              	.LFB12:
 607:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 608:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 609:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetSatMask
 611:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 613:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 616:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 622:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 623:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 624:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 625:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 779              		.loc 1 627 0
 780              		.cfi_startproc
 781 0000 80B5     		push	{r7, lr}
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 7, -8
 784              		.cfi_offset 14, -4
 785 0002 82B0     		sub	sp, sp, #8
 786              		.cfi_def_cfa_offset 16
 787 0004 00AF     		add	r7, sp, #0
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_SAR_SATURATE_INTR_MASK_REG = mask & MotorCurrentADC_MAX_CHANNELS_EN_MASK;
 790              		.loc 1 628 0
 791 0008 034B     		ldr	r3, .L56
 792 000a 7968     		ldr	r1, [r7, #4]
 793 000c 0122     		mov	r2, #1
 794 000e 0A40     		and	r2, r1
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 26


 795 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 796              		.loc 1 629 0
 797 0012 BD46     		mov	sp, r7
 798 0014 02B0     		add	sp, sp, #8
 799              		@ sp needed
 800 0016 80BD     		pop	{r7, pc}
 801              	.L57:
 802              		.align	2
 803              	.L56:
 804 0018 28021A40 		.word	1075446312
 805              		.cfi_endproc
 806              	.LFE12:
 807              		.size	MotorCurrentADC_SetSatMask, .-MotorCurrentADC_SetSatMask
 808              		.section	.text.MotorCurrentADC_SetOffset,"ax",%progbits
 809              		.align	2
 810              		.global	MotorCurrentADC_SetOffset
 811              		.code	16
 812              		.thumb_func
 813              		.type	MotorCurrentADC_SetOffset, %function
 814              	MotorCurrentADC_SetOffset:
 815              	.LFB13:
 630:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 631:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 632:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetOffset
 634:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 636:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 642:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 647:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 648:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 649:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 650:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 653:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 816              		.loc 1 655 0
 817              		.cfi_startproc
 818 0000 80B5     		push	{r7, lr}
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 82B0     		sub	sp, sp, #8
 823              		.cfi_def_cfa_offset 16
 824 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 27


 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
 827 0008 0A1C     		mov	r2, r1
 828 000a BB1C     		add	r3, r7, #2
 829 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
 830              		.loc 1 657 0
 831 000e 7B68     		ldr	r3, [r7, #4]
 832 0010 002B     		cmp	r3, #0
 833 0012 02D0     		beq	.L59
 834              		.loc 1 657 0 is_stmt 0 discriminator 1
 835 0014 0020     		mov	r0, #0
 836 0016 FFF7FEFF 		bl	CyHalt
 837              	.L59:
 658:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 659:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_offset[chan] = offset;
 838              		.loc 1 659 0 is_stmt 1
 839 001a 044B     		ldr	r3, .L60
 840 001c 7A68     		ldr	r2, [r7, #4]
 841 001e 5200     		lsl	r2, r2, #1
 842 0020 B91C     		add	r1, r7, #2
 843 0022 0988     		ldrh	r1, [r1]
 844 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 845              		.loc 1 660 0
 846 0026 BD46     		mov	sp, r7
 847 0028 02B0     		add	sp, sp, #8
 848              		@ sp needed
 849 002a 80BD     		pop	{r7, pc}
 850              	.L61:
 851              		.align	2
 852              	.L60:
 853 002c 00000000 		.word	MotorCurrentADC_offset
 854              		.cfi_endproc
 855              	.LFE13:
 856              		.size	MotorCurrentADC_SetOffset, .-MotorCurrentADC_SetOffset
 857              		.section	.text.MotorCurrentADC_SetGain,"ax",%progbits
 858              		.align	2
 859              		.global	MotorCurrentADC_SetGain
 860              		.code	16
 861              		.thumb_func
 862              		.type	MotorCurrentADC_SetGain, %function
 863              	MotorCurrentADC_SetGain:
 864              	.LFB14:
 661:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 662:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 663:.\Generated_Source\PSoC4/MotorCurrentADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Function Name: MotorCurrentADC_SetGain
 665:.\Generated_Source\PSoC4/MotorCurrentADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 667:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 28


 673:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 676:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 680:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Return:
 681:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  None.
 682:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 683:.\Generated_Source\PSoC4/MotorCurrentADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *  MotorCurrentADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *
 687:.\Generated_Source\PSoC4/MotorCurrentADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/MotorCurrentADC.c **** void MotorCurrentADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/MotorCurrentADC.c **** {
 865              		.loc 1 689 0
 866              		.cfi_startproc
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 82B0     		sub	sp, sp, #8
 872              		.cfi_def_cfa_offset 16
 873 0004 00AF     		add	r7, sp, #0
 874              		.cfi_def_cfa_register 7
 875 0006 7860     		str	r0, [r7, #4]
 876 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
 877              		.loc 1 691 0
 878 000a 7B68     		ldr	r3, [r7, #4]
 879 000c 002B     		cmp	r3, #0
 880 000e 02D0     		beq	.L63
 881              		.loc 1 691 0 is_stmt 0 discriminator 1
 882 0010 0020     		mov	r0, #0
 883 0012 FFF7FEFF 		bl	CyHalt
 884              	.L63:
 692:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 693:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     MotorCurrentADC_countsPer10Volt[chan] = adcGain;
 885              		.loc 1 693 0 is_stmt 1
 886 0016 044B     		ldr	r3, .L64
 887 0018 7A68     		ldr	r2, [r7, #4]
 888 001a 9200     		lsl	r2, r2, #2
 889 001c 3968     		ldr	r1, [r7]
 890 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/MotorCurrentADC.c **** }
 891              		.loc 1 694 0
 892 0020 BD46     		mov	sp, r7
 893 0022 02B0     		add	sp, sp, #8
 894              		@ sp needed
 895 0024 80BD     		pop	{r7, pc}
 896              	.L65:
 897 0026 C046     		.align	2
 898              	.L64:
 899 0028 00000000 		.word	MotorCurrentADC_countsPer10Volt
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 29


 900              		.cfi_endproc
 901              	.LFE14:
 902              		.size	MotorCurrentADC_SetGain, .-MotorCurrentADC_SetGain
 903              		.section	.text.MotorCurrentADC_CountsTo_mVolts,"ax",%progbits
 904              		.align	2
 905              		.global	MotorCurrentADC_CountsTo_mVolts
 906              		.code	16
 907              		.thumb_func
 908              		.type	MotorCurrentADC_CountsTo_mVolts, %function
 909              	MotorCurrentADC_CountsTo_mVolts:
 910              	.LFB15:
 695:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 696:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 697:.\Generated_Source\PSoC4/MotorCurrentADC.c **** #if(MotorCurrentADC_DEFAULT_JUSTIFICATION_SEL == MotorCurrentADC__RIGHT)
 698:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 699:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 700:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Function Name: MotorCurrentADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 704:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 708:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 712:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 715:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 720:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     int16 MotorCurrentADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 911              		.loc 1 722 0
 912              		.cfi_startproc
 913 0000 80B5     		push	{r7, lr}
 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 7, -8
 916              		.cfi_offset 14, -4
 917 0002 84B0     		sub	sp, sp, #16
 918              		.cfi_def_cfa_offset 24
 919 0004 00AF     		add	r7, sp, #0
 920              		.cfi_def_cfa_register 7
 921 0006 7860     		str	r0, [r7, #4]
 922 0008 0A1C     		mov	r2, r1
 923 000a BB1C     		add	r3, r7, #2
 924 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 725:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 30


 925              		.loc 1 726 0
 926 000e 7B68     		ldr	r3, [r7, #4]
 927 0010 002B     		cmp	r3, #0
 928 0012 02D0     		beq	.L67
 929              		.loc 1 726 0 is_stmt 0 discriminator 1
 930 0014 0020     		mov	r0, #0
 931 0016 FFF7FEFF 		bl	CyHalt
 932              	.L67:
 727:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 728:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((MotorCurrentADC_channelsConfig[chan] & MotorCurrentADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 732:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 adcCounts /= MotorCurrentADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 734:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 736:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         adcCounts -= MotorCurrentADC_offset[chan];
 933              		.loc 1 737 0 is_stmt 1
 934 001a BB1C     		add	r3, r7, #2
 935 001c 1A88     		ldrh	r2, [r3]
 936 001e 1E4B     		ldr	r3, .L73
 937 0020 7968     		ldr	r1, [r7, #4]
 938 0022 4900     		lsl	r1, r1, #1
 939 0024 CB5A     		ldrh	r3, [r1, r3]
 940 0026 9BB2     		uxth	r3, r3
 941 0028 9BB2     		uxth	r3, r3
 942 002a D31A     		sub	r3, r2, r3
 943 002c 9AB2     		uxth	r2, r3
 944 002e BB1C     		add	r3, r7, #2
 945 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 739:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         mVolts = (int16)((((int32)adcCounts * MotorCurrentADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 946              		.loc 1 739 0
 947 0032 BB1C     		add	r3, r7, #2
 948 0034 0021     		mov	r1, #0
 949 0036 5B5E     		ldrsh	r3, [r3, r1]
 950 0038 184A     		ldr	r2, .L73+4
 951 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  (MotorCurrentADC_countsPer10Volt[chan] / 2) : (-(MotorCurrentADC_countsPer10Volt[c
 952              		.loc 1 740 0
 953 003c BB1C     		add	r3, r7, #2
 954 003e 0021     		mov	r1, #0
 955 0040 5B5E     		ldrsh	r3, [r3, r1]
 956 0042 002B     		cmp	r3, #0
 957 0044 08DD     		ble	.L68
 958              		.loc 1 740 0 is_stmt 0 discriminator 1
 959 0046 164B     		ldr	r3, .L73+8
 960 0048 7968     		ldr	r1, [r7, #4]
 961 004a 8900     		lsl	r1, r1, #2
 962 004c CB58     		ldr	r3, [r1, r3]
 963 004e 002B     		cmp	r3, #0
 964 0050 00DA     		bge	.L69
 965 0052 0133     		add	r3, r3, #1
 966              	.L69:
 967 0054 5B10     		asr	r3, r3, #1
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 31


 968 0056 08E0     		b	.L70
 969              	.L68:
 970              		.loc 1 740 0 discriminator 2
 971 0058 114B     		ldr	r3, .L73+8
 972 005a 7968     		ldr	r1, [r7, #4]
 973 005c 8900     		lsl	r1, r1, #2
 974 005e CB58     		ldr	r3, [r1, r3]
 975 0060 002B     		cmp	r3, #0
 976 0062 00DA     		bge	.L71
 977 0064 0133     		add	r3, r3, #1
 978              	.L71:
 979 0066 5B10     		asr	r3, r3, #1
 980 0068 5B42     		neg	r3, r3
 981              	.L70:
 739:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         mVolts = (int16)((((int32)adcCounts * MotorCurrentADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 982              		.loc 1 739 0 is_stmt 1
 983 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                  / MotorCurrentADC_countsPer10Volt[chan]);
 984              		.loc 1 741 0
 985 006c 0C4B     		ldr	r3, .L73+8
 986 006e 7968     		ldr	r1, [r7, #4]
 987 0070 8900     		lsl	r1, r1, #2
 988 0072 CB58     		ldr	r3, [r1, r3]
 989 0074 101C     		mov	r0, r2
 990 0076 191C     		mov	r1, r3
 991 0078 FFF7FEFF 		bl	__aeabi_idiv
 992 007c 031C     		mov	r3, r0
 993 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         mVolts = (int16)((((int32)adcCounts * MotorCurrentADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 994              		.loc 1 739 0
 995 0080 3B1C     		mov	r3, r7
 996 0082 0E33     		add	r3, r3, #14
 997 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 743:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         return( mVolts );
 998              		.loc 1 743 0
 999 0086 3B1C     		mov	r3, r7
 1000 0088 0E33     		add	r3, r3, #14
 1001 008a 1B88     		ldrh	r3, [r3]
 1002 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 1003              		.loc 1 744 0
 1004 008e 181C     		mov	r0, r3
 1005 0090 BD46     		mov	sp, r7
 1006 0092 04B0     		add	sp, sp, #16
 1007              		@ sp needed
 1008 0094 80BD     		pop	{r7, pc}
 1009              	.L74:
 1010 0096 C046     		.align	2
 1011              	.L73:
 1012 0098 00000000 		.word	MotorCurrentADC_offset
 1013 009c 10270000 		.word	10000
 1014 00a0 00000000 		.word	MotorCurrentADC_countsPer10Volt
 1015              		.cfi_endproc
 1016              	.LFE15:
 1017              		.size	MotorCurrentADC_CountsTo_mVolts, .-MotorCurrentADC_CountsTo_mVolts
 1018              		.global	__aeabi_lmul
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 32


 1019              		.global	__aeabi_ldivmod
 1020              		.section	.text.MotorCurrentADC_CountsTo_uVolts,"ax",%progbits
 1021              		.align	2
 1022              		.global	MotorCurrentADC_CountsTo_uVolts
 1023              		.code	16
 1024              		.thumb_func
 1025              		.type	MotorCurrentADC_CountsTo_uVolts, %function
 1026              	MotorCurrentADC_CountsTo_uVolts:
 1027              	.LFB16:
 745:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 746:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 747:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Function Name: MotorCurrentADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 751:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 755:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 759:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 762:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 767:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 774:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     int32 MotorCurrentADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 1028              		.loc 1 776 0
 1029              		.cfi_startproc
 1030 0000 B0B5     		push	{r4, r5, r7, lr}
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 4, -16
 1033              		.cfi_offset 5, -12
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 86B0     		sub	sp, sp, #24
 1037              		.cfi_def_cfa_offset 40
 1038 0004 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 1040 0006 F860     		str	r0, [r7, #12]
 1041 0008 0A1C     		mov	r2, r1
 1042 000a 3B1C     		mov	r3, r7
 1043 000c 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 33


 1044 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 779:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
 1045              		.loc 1 780 0
 1046 0010 FB68     		ldr	r3, [r7, #12]
 1047 0012 002B     		cmp	r3, #0
 1048 0014 02D0     		beq	.L76
 1049              		.loc 1 780 0 is_stmt 0 discriminator 1
 1050 0016 0020     		mov	r0, #0
 1051 0018 FFF7FEFF 		bl	CyHalt
 1052              	.L76:
 781:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 782:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((MotorCurrentADC_channelsConfig[chan] & MotorCurrentADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 786:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 adcCounts /= MotorCurrentADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 788:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 790:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         adcCounts -= MotorCurrentADC_offset[chan];
 1053              		.loc 1 791 0 is_stmt 1
 1054 001c 3B1C     		mov	r3, r7
 1055 001e 0A33     		add	r3, r3, #10
 1056 0020 1A88     		ldrh	r2, [r3]
 1057 0022 1B4B     		ldr	r3, .L78+8
 1058 0024 F968     		ldr	r1, [r7, #12]
 1059 0026 4900     		lsl	r1, r1, #1
 1060 0028 CB5A     		ldrh	r3, [r1, r3]
 1061 002a 9BB2     		uxth	r3, r3
 1062 002c 9BB2     		uxth	r3, r3
 1063 002e D31A     		sub	r3, r2, r3
 1064 0030 9AB2     		uxth	r2, r3
 1065 0032 3B1C     		mov	r3, r7
 1066 0034 0A33     		add	r3, r3, #10
 1067 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 793:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         uVolts = ((int64)adcCounts * MotorCurrentADC_10UV_COUNTS) / MotorCurrentADC_countsPer10Volt
 1068              		.loc 1 793 0
 1069 0038 3B1C     		mov	r3, r7
 1070 003a 0A33     		add	r3, r3, #10
 1071 003c 1B88     		ldrh	r3, [r3]
 1072 003e 1BB2     		sxth	r3, r3
 1073 0040 3B60     		str	r3, [r7]
 1074 0042 DB17     		asr	r3, r3, #31
 1075 0044 7B60     		str	r3, [r7, #4]
 1076 0046 3868     		ldr	r0, [r7]
 1077 0048 7968     		ldr	r1, [r7, #4]
 1078 004a 104B     		ldr	r3, .L78+4
 1079 004c 0E4A     		ldr	r2, .L78
 1080 004e FFF7FEFF 		bl	__aeabi_lmul
 1081 0052 021C     		mov	r2, r0
 1082 0054 0B1C     		mov	r3, r1
 1083 0056 0F49     		ldr	r1, .L78+12
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 34


 1084 0058 F868     		ldr	r0, [r7, #12]
 1085 005a 8000     		lsl	r0, r0, #2
 1086 005c 4158     		ldr	r1, [r0, r1]
 1087 005e 0C1C     		mov	r4, r1
 1088 0060 C917     		asr	r1, r1, #31
 1089 0062 0D1C     		mov	r5, r1
 1090 0064 101C     		mov	r0, r2
 1091 0066 191C     		mov	r1, r3
 1092 0068 221C     		mov	r2, r4
 1093 006a 2B1C     		mov	r3, r5
 1094 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1095 0070 031C     		mov	r3, r0
 1096 0072 0C1C     		mov	r4, r1
 1097 0074 3B61     		str	r3, [r7, #16]
 1098 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 795:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         return( (int32)uVolts );
 1099              		.loc 1 795 0
 1100 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 1101              		.loc 1 796 0
 1102 007a 181C     		mov	r0, r3
 1103 007c BD46     		mov	sp, r7
 1104 007e 06B0     		add	sp, sp, #24
 1105              		@ sp needed
 1106 0080 B0BD     		pop	{r4, r5, r7, pc}
 1107              	.L79:
 1108 0082 C046C046 		.align	3
 1108      C046
 1109              	.L78:
 1110 0088 80969800 		.word	10000000
 1111 008c 00000000 		.word	0
 1112 0090 00000000 		.word	MotorCurrentADC_offset
 1113 0094 00000000 		.word	MotorCurrentADC_countsPer10Volt
 1114              		.cfi_endproc
 1115              	.LFE16:
 1116              		.size	MotorCurrentADC_CountsTo_uVolts, .-MotorCurrentADC_CountsTo_uVolts
 1117              		.global	__aeabi_i2f
 1118              		.global	__aeabi_fmul
 1119              		.global	__aeabi_fdiv
 1120              		.section	.text.MotorCurrentADC_CountsTo_Volts,"ax",%progbits
 1121              		.align	2
 1122              		.global	MotorCurrentADC_CountsTo_Volts
 1123              		.code	16
 1124              		.thumb_func
 1125              		.type	MotorCurrentADC_CountsTo_Volts, %function
 1126              	MotorCurrentADC_CountsTo_Volts:
 1127              	.LFB17:
 797:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 798:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 799:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Function Name: MotorCurrentADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 803:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  This function is not available when left data format justification selected.
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 35


 806:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 807:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 811:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 814:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *  MotorCurrentADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *
 819:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     float32 MotorCurrentADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     {
 1128              		.loc 1 821 0
 1129              		.cfi_startproc
 1130 0000 90B5     		push	{r4, r7, lr}
 1131              		.cfi_def_cfa_offset 12
 1132              		.cfi_offset 4, -12
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 85B0     		sub	sp, sp, #20
 1136              		.cfi_def_cfa_offset 32
 1137 0004 00AF     		add	r7, sp, #0
 1138              		.cfi_def_cfa_register 7
 1139 0006 7860     		str	r0, [r7, #4]
 1140 0008 0A1C     		mov	r2, r1
 1141 000a BB1C     		add	r3, r7, #2
 1142 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 824:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         CYASSERT(chan < MotorCurrentADC_TOTAL_CHANNELS_NUM);
 1143              		.loc 1 825 0
 1144 000e 7B68     		ldr	r3, [r7, #4]
 1145 0010 002B     		cmp	r3, #0
 1146 0012 02D0     		beq	.L81
 1147              		.loc 1 825 0 is_stmt 0 discriminator 1
 1148 0014 0020     		mov	r0, #0
 1149 0016 FFF7FEFF 		bl	CyHalt
 1150              	.L81:
 826:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 827:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #if(MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             if((MotorCurrentADC_channelsConfig[chan] & MotorCurrentADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             {
 831:.\Generated_Source\PSoC4/MotorCurrentADC.c ****                 adcCounts /= MotorCurrentADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/MotorCurrentADC.c ****             }
 833:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         #endif /* MotorCurrentADC_DEFAULT_AVG_MODE == MotorCurrentADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 835:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         adcCounts -= MotorCurrentADC_offset[chan];
 1151              		.loc 1 836 0 is_stmt 1
 1152 001a BB1C     		add	r3, r7, #2
 1153 001c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 36


 1154 001e 154B     		ldr	r3, .L83
 1155 0020 7968     		ldr	r1, [r7, #4]
 1156 0022 4900     		lsl	r1, r1, #1
 1157 0024 CB5A     		ldrh	r3, [r1, r3]
 1158 0026 9BB2     		uxth	r3, r3
 1159 0028 9BB2     		uxth	r3, r3
 1160 002a D31A     		sub	r3, r2, r3
 1161 002c 9AB2     		uxth	r2, r3
 1162 002e BB1C     		add	r3, r7, #2
 1163 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 838:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         volts = ((float32)adcCounts * MotorCurrentADC_10V_COUNTS) / (float32)MotorCurrentADC_counts
 1164              		.loc 1 838 0
 1165 0032 BB1C     		add	r3, r7, #2
 1166 0034 0022     		mov	r2, #0
 1167 0036 9B5E     		ldrsh	r3, [r3, r2]
 1168 0038 181C     		mov	r0, r3
 1169 003a FFF7FEFF 		bl	__aeabi_i2f
 1170 003e 031C     		add	r3, r0, #0
 1171 0040 181C     		add	r0, r3, #0
 1172 0042 0D49     		ldr	r1, .L83+4
 1173 0044 FFF7FEFF 		bl	__aeabi_fmul
 1174 0048 031C     		add	r3, r0, #0
 1175 004a 1C1C     		add	r4, r3, #0
 1176 004c 0B4B     		ldr	r3, .L83+8
 1177 004e 7A68     		ldr	r2, [r7, #4]
 1178 0050 9200     		lsl	r2, r2, #2
 1179 0052 D358     		ldr	r3, [r2, r3]
 1180 0054 181C     		mov	r0, r3
 1181 0056 FFF7FEFF 		bl	__aeabi_i2f
 1182 005a 031C     		add	r3, r0, #0
 1183 005c 201C     		add	r0, r4, #0
 1184 005e 191C     		add	r1, r3, #0
 1185 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1186 0064 031C     		add	r3, r0, #0
 1187 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/MotorCurrentADC.c **** 
 840:.\Generated_Source\PSoC4/MotorCurrentADC.c ****         return( volts );
 1188              		.loc 1 840 0
 1189 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/MotorCurrentADC.c ****     }
 1190              		.loc 1 841 0
 1191 006a 181C     		add	r0, r3, #0
 1192 006c BD46     		mov	sp, r7
 1193 006e 05B0     		add	sp, sp, #20
 1194              		@ sp needed
 1195 0070 90BD     		pop	{r4, r7, pc}
 1196              	.L84:
 1197 0072 C046     		.align	2
 1198              	.L83:
 1199 0074 00000000 		.word	MotorCurrentADC_offset
 1200 0078 00002041 		.word	1092616192
 1201 007c 00000000 		.word	MotorCurrentADC_countsPer10Volt
 1202              		.cfi_endproc
 1203              	.LFE17:
 1204              		.size	MotorCurrentADC_CountsTo_Volts, .-MotorCurrentADC_CountsTo_Volts
 1205              		.text
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 37


 1206              	.Letext0:
 1207              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1208              		.section	.debug_info,"",%progbits
 1209              	.Ldebug_info0:
 1210 0000 70040000 		.4byte	0x470
 1211 0004 0400     		.2byte	0x4
 1212 0006 00000000 		.4byte	.Ldebug_abbrev0
 1213 000a 04       		.byte	0x4
 1214 000b 01       		.uleb128 0x1
 1215 000c 18010000 		.4byte	.LASF59
 1216 0010 01       		.byte	0x1
 1217 0011 9C030000 		.4byte	.LASF60
 1218 0015 CF030000 		.4byte	.LASF61
 1219 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1220 001d 00000000 		.4byte	0
 1221 0021 00000000 		.4byte	.Ldebug_line0
 1222 0025 02       		.uleb128 0x2
 1223 0026 01       		.byte	0x1
 1224 0027 06       		.byte	0x6
 1225 0028 8E040000 		.4byte	.LASF0
 1226 002c 02       		.uleb128 0x2
 1227 002d 01       		.byte	0x1
 1228 002e 08       		.byte	0x8
 1229 002f B9010000 		.4byte	.LASF1
 1230 0033 02       		.uleb128 0x2
 1231 0034 02       		.byte	0x2
 1232 0035 05       		.byte	0x5
 1233 0036 26040000 		.4byte	.LASF2
 1234 003a 02       		.uleb128 0x2
 1235 003b 02       		.byte	0x2
 1236 003c 07       		.byte	0x7
 1237 003d 7D000000 		.4byte	.LASF3
 1238 0041 02       		.uleb128 0x2
 1239 0042 04       		.byte	0x4
 1240 0043 05       		.byte	0x5
 1241 0044 80040000 		.4byte	.LASF4
 1242 0048 02       		.uleb128 0x2
 1243 0049 04       		.byte	0x4
 1244 004a 07       		.byte	0x7
 1245 004b BD020000 		.4byte	.LASF5
 1246 004f 02       		.uleb128 0x2
 1247 0050 08       		.byte	0x8
 1248 0051 05       		.byte	0x5
 1249 0052 63030000 		.4byte	.LASF6
 1250 0056 02       		.uleb128 0x2
 1251 0057 08       		.byte	0x8
 1252 0058 07       		.byte	0x7
 1253 0059 FF020000 		.4byte	.LASF7
 1254 005d 03       		.uleb128 0x3
 1255 005e 04       		.byte	0x4
 1256 005f 05       		.byte	0x5
 1257 0060 696E7400 		.ascii	"int\000"
 1258 0064 02       		.uleb128 0x2
 1259 0065 04       		.byte	0x4
 1260 0066 07       		.byte	0x7
 1261 0067 CF020000 		.4byte	.LASF8
 1262 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 38


 1263 006c 94010000 		.4byte	.LASF9
 1264 0070 02       		.byte	0x2
 1265 0071 A1       		.byte	0xa1
 1266 0072 2C000000 		.4byte	0x2c
 1267 0076 04       		.uleb128 0x4
 1268 0077 85020000 		.4byte	.LASF10
 1269 007b 02       		.byte	0x2
 1270 007c A2       		.byte	0xa2
 1271 007d 3A000000 		.4byte	0x3a
 1272 0081 04       		.uleb128 0x4
 1273 0082 96020000 		.4byte	.LASF11
 1274 0086 02       		.byte	0x2
 1275 0087 A3       		.byte	0xa3
 1276 0088 48000000 		.4byte	0x48
 1277 008c 04       		.uleb128 0x4
 1278 008d E3010000 		.4byte	.LASF12
 1279 0091 02       		.byte	0x2
 1280 0092 A5       		.byte	0xa5
 1281 0093 33000000 		.4byte	0x33
 1282 0097 04       		.uleb128 0x4
 1283 0098 1D020000 		.4byte	.LASF13
 1284 009c 02       		.byte	0x2
 1285 009d A6       		.byte	0xa6
 1286 009e 41000000 		.4byte	0x41
 1287 00a2 04       		.uleb128 0x4
 1288 00a3 06010000 		.4byte	.LASF14
 1289 00a7 02       		.byte	0x2
 1290 00a8 A7       		.byte	0xa7
 1291 00a9 AD000000 		.4byte	0xad
 1292 00ad 02       		.uleb128 0x2
 1293 00ae 04       		.byte	0x4
 1294 00af 04       		.byte	0x4
 1295 00b0 5D000000 		.4byte	.LASF15
 1296 00b4 02       		.uleb128 0x2
 1297 00b5 08       		.byte	0x8
 1298 00b6 04       		.byte	0x4
 1299 00b7 3E020000 		.4byte	.LASF16
 1300 00bb 04       		.uleb128 0x4
 1301 00bc 9A040000 		.4byte	.LASF17
 1302 00c0 02       		.byte	0x2
 1303 00c1 AC       		.byte	0xac
 1304 00c2 4F000000 		.4byte	0x4f
 1305 00c6 02       		.uleb128 0x2
 1306 00c7 01       		.byte	0x1
 1307 00c8 08       		.byte	0x8
 1308 00c9 89040000 		.4byte	.LASF18
 1309 00cd 05       		.uleb128 0x5
 1310 00ce 39000000 		.4byte	.LASF19
 1311 00d2 02       		.byte	0x2
 1312 00d3 4D01     		.2byte	0x14d
 1313 00d5 D9000000 		.4byte	0xd9
 1314 00d9 06       		.uleb128 0x6
 1315 00da 81000000 		.4byte	0x81
 1316 00de 02       		.uleb128 0x2
 1317 00df 04       		.byte	0x4
 1318 00e0 07       		.byte	0x7
 1319 00e1 5A030000 		.4byte	.LASF20
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 39


 1320 00e5 07       		.uleb128 0x7
 1321 00e6 1D030000 		.4byte	.LASF24
 1322 00ea 01       		.byte	0x1
 1323 00eb 3F       		.byte	0x3f
 1324 00ec 00000000 		.4byte	.LFB0
 1325 00f0 24000000 		.4byte	.LFE0-.LFB0
 1326 00f4 01       		.uleb128 0x1
 1327 00f5 9C       		.byte	0x9c
 1328 00f6 08       		.uleb128 0x8
 1329 00f7 E9010000 		.4byte	.LASF35
 1330 00fb 01       		.byte	0x1
 1331 00fc 5E       		.byte	0x5e
 1332 00fd 00000000 		.4byte	.LFB1
 1333 0101 A8010000 		.4byte	.LFE1-.LFB1
 1334 0105 01       		.uleb128 0x1
 1335 0106 9C       		.byte	0x9c
 1336 0107 36010000 		.4byte	0x136
 1337 010b 09       		.uleb128 0x9
 1338 010c 96030000 		.4byte	.LASF21
 1339 0110 01       		.byte	0x1
 1340 0111 60       		.byte	0x60
 1341 0112 81000000 		.4byte	0x81
 1342 0116 02       		.uleb128 0x2
 1343 0117 91       		.byte	0x91
 1344 0118 6C       		.sleb128 -20
 1345 0119 09       		.uleb128 0x9
 1346 011a 0E010000 		.4byte	.LASF22
 1347 011e 01       		.byte	0x1
 1348 011f 61       		.byte	0x61
 1349 0120 81000000 		.4byte	0x81
 1350 0124 02       		.uleb128 0x2
 1351 0125 91       		.byte	0x91
 1352 0126 64       		.sleb128 -28
 1353 0127 09       		.uleb128 0x9
 1354 0128 F8020000 		.4byte	.LASF23
 1355 012c 01       		.byte	0x1
 1356 012d 62       		.byte	0x62
 1357 012e 97000000 		.4byte	0x97
 1358 0132 02       		.uleb128 0x2
 1359 0133 91       		.byte	0x91
 1360 0134 68       		.sleb128 -24
 1361 0135 00       		.byte	0
 1362 0136 0A       		.uleb128 0xa
 1363 0137 3F000000 		.4byte	.LASF25
 1364 013b 01       		.byte	0x1
 1365 013c 2701     		.2byte	0x127
 1366 013e 00000000 		.4byte	.LFB2
 1367 0142 28000000 		.4byte	.LFE2-.LFB2
 1368 0146 01       		.uleb128 0x1
 1369 0147 9C       		.byte	0x9c
 1370 0148 0B       		.uleb128 0xb
 1371 0149 33030000 		.4byte	.LASF26
 1372 014d 01       		.byte	0x1
 1373 014e 4A01     		.2byte	0x14a
 1374 0150 00000000 		.4byte	.LFB3
 1375 0154 18000000 		.4byte	.LFE3-.LFB3
 1376 0158 01       		.uleb128 0x1
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 40


 1377 0159 9C       		.byte	0x9c
 1378 015a 0B       		.uleb128 0xb
 1379 015b 90000000 		.4byte	.LASF27
 1380 015f 01       		.byte	0x1
 1381 0160 6401     		.2byte	0x164
 1382 0162 00000000 		.4byte	.LFB4
 1383 0166 1C000000 		.4byte	.LFE4-.LFB4
 1384 016a 01       		.uleb128 0x1
 1385 016b 9C       		.byte	0x9c
 1386 016c 0B       		.uleb128 0xb
 1387 016d 00000000 		.4byte	.LASF28
 1388 0171 01       		.byte	0x1
 1389 0172 7D01     		.2byte	0x17d
 1390 0174 00000000 		.4byte	.LFB5
 1391 0178 1C000000 		.4byte	.LFE5-.LFB5
 1392 017c 01       		.uleb128 0x1
 1393 017d 9C       		.byte	0x9c
 1394 017e 0C       		.uleb128 0xc
 1395 017f C5000000 		.4byte	.LASF30
 1396 0183 01       		.byte	0x1
 1397 0184 9F01     		.2byte	0x19f
 1398 0186 81000000 		.4byte	0x81
 1399 018a 00000000 		.4byte	.LFB6
 1400 018e 48000000 		.4byte	.LFE6-.LFB6
 1401 0192 01       		.uleb128 0x1
 1402 0193 9C       		.byte	0x9c
 1403 0194 B7010000 		.4byte	0x1b7
 1404 0198 0D       		.uleb128 0xd
 1405 0199 C7030000 		.4byte	.LASF32
 1406 019d 01       		.byte	0x1
 1407 019e 9F01     		.2byte	0x19f
 1408 01a0 81000000 		.4byte	0x81
 1409 01a4 02       		.uleb128 0x2
 1410 01a5 91       		.byte	0x91
 1411 01a6 6C       		.sleb128 -20
 1412 01a7 0E       		.uleb128 0xe
 1413 01a8 E5000000 		.4byte	.LASF29
 1414 01ac 01       		.byte	0x1
 1415 01ad A101     		.2byte	0x1a1
 1416 01af 81000000 		.4byte	0x81
 1417 01b3 02       		.uleb128 0x2
 1418 01b4 91       		.byte	0x91
 1419 01b5 74       		.sleb128 -12
 1420 01b6 00       		.byte	0
 1421 01b7 0F       		.uleb128 0xf
 1422 01b8 C7010000 		.4byte	.LASF31
 1423 01bc 01       		.byte	0x1
 1424 01bd D501     		.2byte	0x1d5
 1425 01bf 8C000000 		.4byte	0x8c
 1426 01c3 00000000 		.4byte	.LFB7
 1427 01c7 44000000 		.4byte	.LFE7-.LFB7
 1428 01cb 01       		.uleb128 0x1
 1429 01cc 9C       		.byte	0x9c
 1430 01cd F0010000 		.4byte	0x1f0
 1431 01d1 0D       		.uleb128 0xd
 1432 01d2 4E030000 		.4byte	.LASF33
 1433 01d6 01       		.byte	0x1
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 41


 1434 01d7 D501     		.2byte	0x1d5
 1435 01d9 81000000 		.4byte	0x81
 1436 01dd 02       		.uleb128 0x2
 1437 01de 91       		.byte	0x91
 1438 01df 6C       		.sleb128 -20
 1439 01e0 0E       		.uleb128 0xe
 1440 01e1 16030000 		.4byte	.LASF34
 1441 01e5 01       		.byte	0x1
 1442 01e6 D701     		.2byte	0x1d7
 1443 01e8 81000000 		.4byte	0x81
 1444 01ec 02       		.uleb128 0x2
 1445 01ed 91       		.byte	0x91
 1446 01ee 74       		.sleb128 -12
 1447 01ef 00       		.byte	0
 1448 01f0 10       		.uleb128 0x10
 1449 01f1 64040000 		.4byte	.LASF36
 1450 01f5 01       		.byte	0x1
 1451 01f6 0202     		.2byte	0x202
 1452 01f8 00000000 		.4byte	.LFB8
 1453 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1454 0200 01       		.uleb128 0x1
 1455 0201 9C       		.byte	0x9c
 1456 0202 16020000 		.4byte	0x216
 1457 0206 0D       		.uleb128 0xd
 1458 0207 91030000 		.4byte	.LASF37
 1459 020b 01       		.byte	0x1
 1460 020c 0202     		.2byte	0x202
 1461 020e 81000000 		.4byte	0x81
 1462 0212 02       		.uleb128 0x2
 1463 0213 91       		.byte	0x91
 1464 0214 74       		.sleb128 -12
 1465 0215 00       		.byte	0
 1466 0216 10       		.uleb128 0x10
 1467 0217 DC020000 		.4byte	.LASF38
 1468 021b 01       		.byte	0x1
 1469 021c 2E02     		.2byte	0x22e
 1470 021e 00000000 		.4byte	.LFB9
 1471 0222 30000000 		.4byte	.LFE9-.LFB9
 1472 0226 01       		.uleb128 0x1
 1473 0227 9C       		.byte	0x9c
 1474 0228 3C020000 		.4byte	0x23c
 1475 022c 0D       		.uleb128 0xd
 1476 022d 6D000000 		.4byte	.LASF39
 1477 0231 01       		.byte	0x1
 1478 0232 2E02     		.2byte	0x22e
 1479 0234 81000000 		.4byte	0x81
 1480 0238 02       		.uleb128 0x2
 1481 0239 91       		.byte	0x91
 1482 023a 74       		.sleb128 -12
 1483 023b 00       		.byte	0
 1484 023c 10       		.uleb128 0x10
 1485 023d 30040000 		.4byte	.LASF40
 1486 0241 01       		.byte	0x1
 1487 0242 4302     		.2byte	0x243
 1488 0244 00000000 		.4byte	.LFB10
 1489 0248 2C000000 		.4byte	.LFE10-.LFB10
 1490 024c 01       		.uleb128 0x1
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 42


 1491 024d 9C       		.byte	0x9c
 1492 024e 62020000 		.4byte	0x262
 1493 0252 0D       		.uleb128 0xd
 1494 0253 63000000 		.4byte	.LASF41
 1495 0257 01       		.byte	0x1
 1496 0258 4302     		.2byte	0x243
 1497 025a 81000000 		.4byte	0x81
 1498 025e 02       		.uleb128 0x2
 1499 025f 91       		.byte	0x91
 1500 0260 74       		.sleb128 -12
 1501 0261 00       		.byte	0
 1502 0262 10       		.uleb128 0x10
 1503 0263 1C000000 		.4byte	.LASF42
 1504 0267 01       		.byte	0x1
 1505 0268 5B02     		.2byte	0x25b
 1506 026a 00000000 		.4byte	.LFB11
 1507 026e 1C000000 		.4byte	.LFE11-.LFB11
 1508 0272 01       		.uleb128 0x1
 1509 0273 9C       		.byte	0x9c
 1510 0274 88020000 		.4byte	0x288
 1511 0278 0D       		.uleb128 0xd
 1512 0279 91030000 		.4byte	.LASF37
 1513 027d 01       		.byte	0x1
 1514 027e 5B02     		.2byte	0x25b
 1515 0280 81000000 		.4byte	0x81
 1516 0284 02       		.uleb128 0x2
 1517 0285 91       		.byte	0x91
 1518 0286 74       		.sleb128 -12
 1519 0287 00       		.byte	0
 1520 0288 10       		.uleb128 0x10
 1521 0289 23020000 		.4byte	.LASF43
 1522 028d 01       		.byte	0x1
 1523 028e 7202     		.2byte	0x272
 1524 0290 00000000 		.4byte	.LFB12
 1525 0294 1C000000 		.4byte	.LFE12-.LFB12
 1526 0298 01       		.uleb128 0x1
 1527 0299 9C       		.byte	0x9c
 1528 029a AE020000 		.4byte	0x2ae
 1529 029e 0D       		.uleb128 0xd
 1530 029f 91030000 		.4byte	.LASF37
 1531 02a3 01       		.byte	0x1
 1532 02a4 7202     		.2byte	0x272
 1533 02a6 81000000 		.4byte	0x81
 1534 02aa 02       		.uleb128 0x2
 1535 02ab 91       		.byte	0x91
 1536 02ac 74       		.sleb128 -12
 1537 02ad 00       		.byte	0
 1538 02ae 11       		.uleb128 0x11
 1539 02af EC000000 		.4byte	.LASF44
 1540 02b3 01       		.byte	0x1
 1541 02b4 8E02     		.2byte	0x28e
 1542 02b6 00000000 		.4byte	.LFB13
 1543 02ba 30000000 		.4byte	.LFE13-.LFB13
 1544 02be 01       		.uleb128 0x1
 1545 02bf 9C       		.byte	0x9c
 1546 02c0 E3020000 		.4byte	0x2e3
 1547 02c4 0D       		.uleb128 0xd
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 43


 1548 02c5 4E030000 		.4byte	.LASF33
 1549 02c9 01       		.byte	0x1
 1550 02ca 8E02     		.2byte	0x28e
 1551 02cc 81000000 		.4byte	0x81
 1552 02d0 02       		.uleb128 0x2
 1553 02d1 91       		.byte	0x91
 1554 02d2 74       		.sleb128 -12
 1555 02d3 0D       		.uleb128 0xd
 1556 02d4 56000000 		.4byte	.LASF45
 1557 02d8 01       		.byte	0x1
 1558 02d9 8E02     		.2byte	0x28e
 1559 02db 8C000000 		.4byte	0x8c
 1560 02df 02       		.uleb128 0x2
 1561 02e0 91       		.byte	0x91
 1562 02e1 72       		.sleb128 -14
 1563 02e2 00       		.byte	0
 1564 02e3 11       		.uleb128 0x11
 1565 02e4 65020000 		.4byte	.LASF46
 1566 02e8 01       		.byte	0x1
 1567 02e9 B002     		.2byte	0x2b0
 1568 02eb 00000000 		.4byte	.LFB14
 1569 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1570 02f3 01       		.uleb128 0x1
 1571 02f4 9C       		.byte	0x9c
 1572 02f5 18030000 		.4byte	0x318
 1573 02f9 0D       		.uleb128 0xd
 1574 02fa 4E030000 		.4byte	.LASF33
 1575 02fe 01       		.byte	0x1
 1576 02ff B002     		.2byte	0x2b0
 1577 0301 81000000 		.4byte	0x81
 1578 0305 02       		.uleb128 0x2
 1579 0306 91       		.byte	0x91
 1580 0307 74       		.sleb128 -12
 1581 0308 0D       		.uleb128 0xd
 1582 0309 7D020000 		.4byte	.LASF47
 1583 030d 01       		.byte	0x1
 1584 030e B002     		.2byte	0x2b0
 1585 0310 97000000 		.4byte	0x97
 1586 0314 02       		.uleb128 0x2
 1587 0315 91       		.byte	0x91
 1588 0316 70       		.sleb128 -16
 1589 0317 00       		.byte	0
 1590 0318 0F       		.uleb128 0xf
 1591 0319 45020000 		.4byte	.LASF48
 1592 031d 01       		.byte	0x1
 1593 031e D102     		.2byte	0x2d1
 1594 0320 8C000000 		.4byte	0x8c
 1595 0324 00000000 		.4byte	.LFB15
 1596 0328 A4000000 		.4byte	.LFE15-.LFB15
 1597 032c 01       		.uleb128 0x1
 1598 032d 9C       		.byte	0x9c
 1599 032e 60030000 		.4byte	0x360
 1600 0332 0D       		.uleb128 0xd
 1601 0333 4E030000 		.4byte	.LASF33
 1602 0337 01       		.byte	0x1
 1603 0338 D102     		.2byte	0x2d1
 1604 033a 81000000 		.4byte	0x81
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 44


 1605 033e 02       		.uleb128 0x2
 1606 033f 91       		.byte	0x91
 1607 0340 6C       		.sleb128 -20
 1608 0341 0D       		.uleb128 0xd
 1609 0342 8C020000 		.4byte	.LASF49
 1610 0346 01       		.byte	0x1
 1611 0347 D102     		.2byte	0x2d1
 1612 0349 8C000000 		.4byte	0x8c
 1613 034d 02       		.uleb128 0x2
 1614 034e 91       		.byte	0x91
 1615 034f 6A       		.sleb128 -22
 1616 0350 0E       		.uleb128 0xe
 1617 0351 53030000 		.4byte	.LASF50
 1618 0355 01       		.byte	0x1
 1619 0356 D302     		.2byte	0x2d3
 1620 0358 8C000000 		.4byte	0x8c
 1621 035c 02       		.uleb128 0x2
 1622 035d 91       		.byte	0x91
 1623 035e 76       		.sleb128 -10
 1624 035f 00       		.byte	0
 1625 0360 0F       		.uleb128 0xf
 1626 0361 9D020000 		.4byte	.LASF51
 1627 0365 01       		.byte	0x1
 1628 0366 0703     		.2byte	0x307
 1629 0368 97000000 		.4byte	0x97
 1630 036c 00000000 		.4byte	.LFB16
 1631 0370 98000000 		.4byte	.LFE16-.LFB16
 1632 0374 01       		.uleb128 0x1
 1633 0375 9C       		.byte	0x9c
 1634 0376 A8030000 		.4byte	0x3a8
 1635 037a 0D       		.uleb128 0xd
 1636 037b 4E030000 		.4byte	.LASF33
 1637 037f 01       		.byte	0x1
 1638 0380 0703     		.2byte	0x307
 1639 0382 81000000 		.4byte	0x81
 1640 0386 02       		.uleb128 0x2
 1641 0387 91       		.byte	0x91
 1642 0388 64       		.sleb128 -28
 1643 0389 0D       		.uleb128 0xd
 1644 038a 8C020000 		.4byte	.LASF49
 1645 038e 01       		.byte	0x1
 1646 038f 0703     		.2byte	0x307
 1647 0391 8C000000 		.4byte	0x8c
 1648 0395 02       		.uleb128 0x2
 1649 0396 91       		.byte	0x91
 1650 0397 62       		.sleb128 -30
 1651 0398 0E       		.uleb128 0xe
 1652 0399 76000000 		.4byte	.LASF52
 1653 039d 01       		.byte	0x1
 1654 039e 0903     		.2byte	0x309
 1655 03a0 BB000000 		.4byte	0xbb
 1656 03a4 02       		.uleb128 0x2
 1657 03a5 91       		.byte	0x91
 1658 03a6 68       		.sleb128 -24
 1659 03a7 00       		.byte	0
 1660 03a8 0F       		.uleb128 0xf
 1661 03a9 FE010000 		.4byte	.LASF53
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 45


 1662 03ad 01       		.byte	0x1
 1663 03ae 3403     		.2byte	0x334
 1664 03b0 A2000000 		.4byte	0xa2
 1665 03b4 00000000 		.4byte	.LFB17
 1666 03b8 80000000 		.4byte	.LFE17-.LFB17
 1667 03bc 01       		.uleb128 0x1
 1668 03bd 9C       		.byte	0x9c
 1669 03be F0030000 		.4byte	0x3f0
 1670 03c2 0D       		.uleb128 0xd
 1671 03c3 4E030000 		.4byte	.LASF33
 1672 03c7 01       		.byte	0x1
 1673 03c8 3403     		.2byte	0x334
 1674 03ca 81000000 		.4byte	0x81
 1675 03ce 02       		.uleb128 0x2
 1676 03cf 91       		.byte	0x91
 1677 03d0 64       		.sleb128 -28
 1678 03d1 0D       		.uleb128 0xd
 1679 03d2 8C020000 		.4byte	.LASF49
 1680 03d6 01       		.byte	0x1
 1681 03d7 3403     		.2byte	0x334
 1682 03d9 8C000000 		.4byte	0x8c
 1683 03dd 02       		.uleb128 0x2
 1684 03de 91       		.byte	0x91
 1685 03df 62       		.sleb128 -30
 1686 03e0 0E       		.uleb128 0xe
 1687 03e1 48030000 		.4byte	.LASF54
 1688 03e5 01       		.byte	0x1
 1689 03e6 3603     		.2byte	0x336
 1690 03e8 A2000000 		.4byte	0xa2
 1691 03ec 02       		.uleb128 0x2
 1692 03ed 91       		.byte	0x91
 1693 03ee 6C       		.sleb128 -20
 1694 03ef 00       		.byte	0
 1695 03f0 12       		.uleb128 0x12
 1696 03f1 81000000 		.4byte	0x81
 1697 03f5 00040000 		.4byte	0x400
 1698 03f9 13       		.uleb128 0x13
 1699 03fa DE000000 		.4byte	0xde
 1700 03fe 00       		.byte	0
 1701 03ff 00       		.byte	0
 1702 0400 09       		.uleb128 0x9
 1703 0401 9A010000 		.4byte	.LASF55
 1704 0405 01       		.byte	0x1
 1705 0406 21       		.byte	0x21
 1706 0407 11040000 		.4byte	0x411
 1707 040b 05       		.uleb128 0x5
 1708 040c 03       		.byte	0x3
 1709 040d 00000000 		.4byte	MotorCurrentADC_channelsConfig
 1710 0411 14       		.uleb128 0x14
 1711 0412 F0030000 		.4byte	0x3f0
 1712 0416 15       		.uleb128 0x15
 1713 0417 AD000000 		.4byte	.LASF56
 1714 041b 01       		.byte	0x1
 1715 041c 18       		.byte	0x18
 1716 041d 6B000000 		.4byte	0x6b
 1717 0421 05       		.uleb128 0x5
 1718 0422 03       		.byte	0x3
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 46


 1719 0423 00000000 		.4byte	MotorCurrentADC_initVar
 1720 0427 12       		.uleb128 0x12
 1721 0428 8C000000 		.4byte	0x8c
 1722 042c 37040000 		.4byte	0x437
 1723 0430 13       		.uleb128 0x13
 1724 0431 DE000000 		.4byte	0xde
 1725 0435 00       		.byte	0
 1726 0436 00       		.byte	0
 1727 0437 15       		.uleb128 0x15
 1728 0438 4D040000 		.4byte	.LASF57
 1729 043c 01       		.byte	0x1
 1730 043d 19       		.byte	0x19
 1731 043e 48040000 		.4byte	0x448
 1732 0442 05       		.uleb128 0x5
 1733 0443 03       		.byte	0x3
 1734 0444 00000000 		.4byte	MotorCurrentADC_offset
 1735 0448 06       		.uleb128 0x6
 1736 0449 27040000 		.4byte	0x427
 1737 044d 12       		.uleb128 0x12
 1738 044e 97000000 		.4byte	0x97
 1739 0452 5D040000 		.4byte	0x45d
 1740 0456 13       		.uleb128 0x13
 1741 0457 DE000000 		.4byte	0xde
 1742 045b 00       		.byte	0
 1743 045c 00       		.byte	0
 1744 045d 15       		.uleb128 0x15
 1745 045e 71030000 		.4byte	.LASF58
 1746 0462 01       		.byte	0x1
 1747 0463 1A       		.byte	0x1a
 1748 0464 6E040000 		.4byte	0x46e
 1749 0468 05       		.uleb128 0x5
 1750 0469 03       		.byte	0x3
 1751 046a 00000000 		.4byte	MotorCurrentADC_countsPer10Volt
 1752 046e 06       		.uleb128 0x6
 1753 046f 4D040000 		.4byte	0x44d
 1754 0473 00       		.byte	0
 1755              		.section	.debug_abbrev,"",%progbits
 1756              	.Ldebug_abbrev0:
 1757 0000 01       		.uleb128 0x1
 1758 0001 11       		.uleb128 0x11
 1759 0002 01       		.byte	0x1
 1760 0003 25       		.uleb128 0x25
 1761 0004 0E       		.uleb128 0xe
 1762 0005 13       		.uleb128 0x13
 1763 0006 0B       		.uleb128 0xb
 1764 0007 03       		.uleb128 0x3
 1765 0008 0E       		.uleb128 0xe
 1766 0009 1B       		.uleb128 0x1b
 1767 000a 0E       		.uleb128 0xe
 1768 000b 55       		.uleb128 0x55
 1769 000c 17       		.uleb128 0x17
 1770 000d 11       		.uleb128 0x11
 1771 000e 01       		.uleb128 0x1
 1772 000f 10       		.uleb128 0x10
 1773 0010 17       		.uleb128 0x17
 1774 0011 00       		.byte	0
 1775 0012 00       		.byte	0
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 47


 1776 0013 02       		.uleb128 0x2
 1777 0014 24       		.uleb128 0x24
 1778 0015 00       		.byte	0
 1779 0016 0B       		.uleb128 0xb
 1780 0017 0B       		.uleb128 0xb
 1781 0018 3E       		.uleb128 0x3e
 1782 0019 0B       		.uleb128 0xb
 1783 001a 03       		.uleb128 0x3
 1784 001b 0E       		.uleb128 0xe
 1785 001c 00       		.byte	0
 1786 001d 00       		.byte	0
 1787 001e 03       		.uleb128 0x3
 1788 001f 24       		.uleb128 0x24
 1789 0020 00       		.byte	0
 1790 0021 0B       		.uleb128 0xb
 1791 0022 0B       		.uleb128 0xb
 1792 0023 3E       		.uleb128 0x3e
 1793 0024 0B       		.uleb128 0xb
 1794 0025 03       		.uleb128 0x3
 1795 0026 08       		.uleb128 0x8
 1796 0027 00       		.byte	0
 1797 0028 00       		.byte	0
 1798 0029 04       		.uleb128 0x4
 1799 002a 16       		.uleb128 0x16
 1800 002b 00       		.byte	0
 1801 002c 03       		.uleb128 0x3
 1802 002d 0E       		.uleb128 0xe
 1803 002e 3A       		.uleb128 0x3a
 1804 002f 0B       		.uleb128 0xb
 1805 0030 3B       		.uleb128 0x3b
 1806 0031 0B       		.uleb128 0xb
 1807 0032 49       		.uleb128 0x49
 1808 0033 13       		.uleb128 0x13
 1809 0034 00       		.byte	0
 1810 0035 00       		.byte	0
 1811 0036 05       		.uleb128 0x5
 1812 0037 16       		.uleb128 0x16
 1813 0038 00       		.byte	0
 1814 0039 03       		.uleb128 0x3
 1815 003a 0E       		.uleb128 0xe
 1816 003b 3A       		.uleb128 0x3a
 1817 003c 0B       		.uleb128 0xb
 1818 003d 3B       		.uleb128 0x3b
 1819 003e 05       		.uleb128 0x5
 1820 003f 49       		.uleb128 0x49
 1821 0040 13       		.uleb128 0x13
 1822 0041 00       		.byte	0
 1823 0042 00       		.byte	0
 1824 0043 06       		.uleb128 0x6
 1825 0044 35       		.uleb128 0x35
 1826 0045 00       		.byte	0
 1827 0046 49       		.uleb128 0x49
 1828 0047 13       		.uleb128 0x13
 1829 0048 00       		.byte	0
 1830 0049 00       		.byte	0
 1831 004a 07       		.uleb128 0x7
 1832 004b 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 48


 1833 004c 00       		.byte	0
 1834 004d 3F       		.uleb128 0x3f
 1835 004e 19       		.uleb128 0x19
 1836 004f 03       		.uleb128 0x3
 1837 0050 0E       		.uleb128 0xe
 1838 0051 3A       		.uleb128 0x3a
 1839 0052 0B       		.uleb128 0xb
 1840 0053 3B       		.uleb128 0x3b
 1841 0054 0B       		.uleb128 0xb
 1842 0055 27       		.uleb128 0x27
 1843 0056 19       		.uleb128 0x19
 1844 0057 11       		.uleb128 0x11
 1845 0058 01       		.uleb128 0x1
 1846 0059 12       		.uleb128 0x12
 1847 005a 06       		.uleb128 0x6
 1848 005b 40       		.uleb128 0x40
 1849 005c 18       		.uleb128 0x18
 1850 005d 9642     		.uleb128 0x2116
 1851 005f 19       		.uleb128 0x19
 1852 0060 00       		.byte	0
 1853 0061 00       		.byte	0
 1854 0062 08       		.uleb128 0x8
 1855 0063 2E       		.uleb128 0x2e
 1856 0064 01       		.byte	0x1
 1857 0065 3F       		.uleb128 0x3f
 1858 0066 19       		.uleb128 0x19
 1859 0067 03       		.uleb128 0x3
 1860 0068 0E       		.uleb128 0xe
 1861 0069 3A       		.uleb128 0x3a
 1862 006a 0B       		.uleb128 0xb
 1863 006b 3B       		.uleb128 0x3b
 1864 006c 0B       		.uleb128 0xb
 1865 006d 27       		.uleb128 0x27
 1866 006e 19       		.uleb128 0x19
 1867 006f 11       		.uleb128 0x11
 1868 0070 01       		.uleb128 0x1
 1869 0071 12       		.uleb128 0x12
 1870 0072 06       		.uleb128 0x6
 1871 0073 40       		.uleb128 0x40
 1872 0074 18       		.uleb128 0x18
 1873 0075 9642     		.uleb128 0x2116
 1874 0077 19       		.uleb128 0x19
 1875 0078 01       		.uleb128 0x1
 1876 0079 13       		.uleb128 0x13
 1877 007a 00       		.byte	0
 1878 007b 00       		.byte	0
 1879 007c 09       		.uleb128 0x9
 1880 007d 34       		.uleb128 0x34
 1881 007e 00       		.byte	0
 1882 007f 03       		.uleb128 0x3
 1883 0080 0E       		.uleb128 0xe
 1884 0081 3A       		.uleb128 0x3a
 1885 0082 0B       		.uleb128 0xb
 1886 0083 3B       		.uleb128 0x3b
 1887 0084 0B       		.uleb128 0xb
 1888 0085 49       		.uleb128 0x49
 1889 0086 13       		.uleb128 0x13
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 49


 1890 0087 02       		.uleb128 0x2
 1891 0088 18       		.uleb128 0x18
 1892 0089 00       		.byte	0
 1893 008a 00       		.byte	0
 1894 008b 0A       		.uleb128 0xa
 1895 008c 2E       		.uleb128 0x2e
 1896 008d 00       		.byte	0
 1897 008e 3F       		.uleb128 0x3f
 1898 008f 19       		.uleb128 0x19
 1899 0090 03       		.uleb128 0x3
 1900 0091 0E       		.uleb128 0xe
 1901 0092 3A       		.uleb128 0x3a
 1902 0093 0B       		.uleb128 0xb
 1903 0094 3B       		.uleb128 0x3b
 1904 0095 05       		.uleb128 0x5
 1905 0096 27       		.uleb128 0x27
 1906 0097 19       		.uleb128 0x19
 1907 0098 11       		.uleb128 0x11
 1908 0099 01       		.uleb128 0x1
 1909 009a 12       		.uleb128 0x12
 1910 009b 06       		.uleb128 0x6
 1911 009c 40       		.uleb128 0x40
 1912 009d 18       		.uleb128 0x18
 1913 009e 9642     		.uleb128 0x2116
 1914 00a0 19       		.uleb128 0x19
 1915 00a1 00       		.byte	0
 1916 00a2 00       		.byte	0
 1917 00a3 0B       		.uleb128 0xb
 1918 00a4 2E       		.uleb128 0x2e
 1919 00a5 00       		.byte	0
 1920 00a6 3F       		.uleb128 0x3f
 1921 00a7 19       		.uleb128 0x19
 1922 00a8 03       		.uleb128 0x3
 1923 00a9 0E       		.uleb128 0xe
 1924 00aa 3A       		.uleb128 0x3a
 1925 00ab 0B       		.uleb128 0xb
 1926 00ac 3B       		.uleb128 0x3b
 1927 00ad 05       		.uleb128 0x5
 1928 00ae 27       		.uleb128 0x27
 1929 00af 19       		.uleb128 0x19
 1930 00b0 11       		.uleb128 0x11
 1931 00b1 01       		.uleb128 0x1
 1932 00b2 12       		.uleb128 0x12
 1933 00b3 06       		.uleb128 0x6
 1934 00b4 40       		.uleb128 0x40
 1935 00b5 18       		.uleb128 0x18
 1936 00b6 9742     		.uleb128 0x2117
 1937 00b8 19       		.uleb128 0x19
 1938 00b9 00       		.byte	0
 1939 00ba 00       		.byte	0
 1940 00bb 0C       		.uleb128 0xc
 1941 00bc 2E       		.uleb128 0x2e
 1942 00bd 01       		.byte	0x1
 1943 00be 3F       		.uleb128 0x3f
 1944 00bf 19       		.uleb128 0x19
 1945 00c0 03       		.uleb128 0x3
 1946 00c1 0E       		.uleb128 0xe
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 50


 1947 00c2 3A       		.uleb128 0x3a
 1948 00c3 0B       		.uleb128 0xb
 1949 00c4 3B       		.uleb128 0x3b
 1950 00c5 05       		.uleb128 0x5
 1951 00c6 27       		.uleb128 0x27
 1952 00c7 19       		.uleb128 0x19
 1953 00c8 49       		.uleb128 0x49
 1954 00c9 13       		.uleb128 0x13
 1955 00ca 11       		.uleb128 0x11
 1956 00cb 01       		.uleb128 0x1
 1957 00cc 12       		.uleb128 0x12
 1958 00cd 06       		.uleb128 0x6
 1959 00ce 40       		.uleb128 0x40
 1960 00cf 18       		.uleb128 0x18
 1961 00d0 9742     		.uleb128 0x2117
 1962 00d2 19       		.uleb128 0x19
 1963 00d3 01       		.uleb128 0x1
 1964 00d4 13       		.uleb128 0x13
 1965 00d5 00       		.byte	0
 1966 00d6 00       		.byte	0
 1967 00d7 0D       		.uleb128 0xd
 1968 00d8 05       		.uleb128 0x5
 1969 00d9 00       		.byte	0
 1970 00da 03       		.uleb128 0x3
 1971 00db 0E       		.uleb128 0xe
 1972 00dc 3A       		.uleb128 0x3a
 1973 00dd 0B       		.uleb128 0xb
 1974 00de 3B       		.uleb128 0x3b
 1975 00df 05       		.uleb128 0x5
 1976 00e0 49       		.uleb128 0x49
 1977 00e1 13       		.uleb128 0x13
 1978 00e2 02       		.uleb128 0x2
 1979 00e3 18       		.uleb128 0x18
 1980 00e4 00       		.byte	0
 1981 00e5 00       		.byte	0
 1982 00e6 0E       		.uleb128 0xe
 1983 00e7 34       		.uleb128 0x34
 1984 00e8 00       		.byte	0
 1985 00e9 03       		.uleb128 0x3
 1986 00ea 0E       		.uleb128 0xe
 1987 00eb 3A       		.uleb128 0x3a
 1988 00ec 0B       		.uleb128 0xb
 1989 00ed 3B       		.uleb128 0x3b
 1990 00ee 05       		.uleb128 0x5
 1991 00ef 49       		.uleb128 0x49
 1992 00f0 13       		.uleb128 0x13
 1993 00f1 02       		.uleb128 0x2
 1994 00f2 18       		.uleb128 0x18
 1995 00f3 00       		.byte	0
 1996 00f4 00       		.byte	0
 1997 00f5 0F       		.uleb128 0xf
 1998 00f6 2E       		.uleb128 0x2e
 1999 00f7 01       		.byte	0x1
 2000 00f8 3F       		.uleb128 0x3f
 2001 00f9 19       		.uleb128 0x19
 2002 00fa 03       		.uleb128 0x3
 2003 00fb 0E       		.uleb128 0xe
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 51


 2004 00fc 3A       		.uleb128 0x3a
 2005 00fd 0B       		.uleb128 0xb
 2006 00fe 3B       		.uleb128 0x3b
 2007 00ff 05       		.uleb128 0x5
 2008 0100 27       		.uleb128 0x27
 2009 0101 19       		.uleb128 0x19
 2010 0102 49       		.uleb128 0x49
 2011 0103 13       		.uleb128 0x13
 2012 0104 11       		.uleb128 0x11
 2013 0105 01       		.uleb128 0x1
 2014 0106 12       		.uleb128 0x12
 2015 0107 06       		.uleb128 0x6
 2016 0108 40       		.uleb128 0x40
 2017 0109 18       		.uleb128 0x18
 2018 010a 9642     		.uleb128 0x2116
 2019 010c 19       		.uleb128 0x19
 2020 010d 01       		.uleb128 0x1
 2021 010e 13       		.uleb128 0x13
 2022 010f 00       		.byte	0
 2023 0110 00       		.byte	0
 2024 0111 10       		.uleb128 0x10
 2025 0112 2E       		.uleb128 0x2e
 2026 0113 01       		.byte	0x1
 2027 0114 3F       		.uleb128 0x3f
 2028 0115 19       		.uleb128 0x19
 2029 0116 03       		.uleb128 0x3
 2030 0117 0E       		.uleb128 0xe
 2031 0118 3A       		.uleb128 0x3a
 2032 0119 0B       		.uleb128 0xb
 2033 011a 3B       		.uleb128 0x3b
 2034 011b 05       		.uleb128 0x5
 2035 011c 27       		.uleb128 0x27
 2036 011d 19       		.uleb128 0x19
 2037 011e 11       		.uleb128 0x11
 2038 011f 01       		.uleb128 0x1
 2039 0120 12       		.uleb128 0x12
 2040 0121 06       		.uleb128 0x6
 2041 0122 40       		.uleb128 0x40
 2042 0123 18       		.uleb128 0x18
 2043 0124 9742     		.uleb128 0x2117
 2044 0126 19       		.uleb128 0x19
 2045 0127 01       		.uleb128 0x1
 2046 0128 13       		.uleb128 0x13
 2047 0129 00       		.byte	0
 2048 012a 00       		.byte	0
 2049 012b 11       		.uleb128 0x11
 2050 012c 2E       		.uleb128 0x2e
 2051 012d 01       		.byte	0x1
 2052 012e 3F       		.uleb128 0x3f
 2053 012f 19       		.uleb128 0x19
 2054 0130 03       		.uleb128 0x3
 2055 0131 0E       		.uleb128 0xe
 2056 0132 3A       		.uleb128 0x3a
 2057 0133 0B       		.uleb128 0xb
 2058 0134 3B       		.uleb128 0x3b
 2059 0135 05       		.uleb128 0x5
 2060 0136 27       		.uleb128 0x27
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 52


 2061 0137 19       		.uleb128 0x19
 2062 0138 11       		.uleb128 0x11
 2063 0139 01       		.uleb128 0x1
 2064 013a 12       		.uleb128 0x12
 2065 013b 06       		.uleb128 0x6
 2066 013c 40       		.uleb128 0x40
 2067 013d 18       		.uleb128 0x18
 2068 013e 9642     		.uleb128 0x2116
 2069 0140 19       		.uleb128 0x19
 2070 0141 01       		.uleb128 0x1
 2071 0142 13       		.uleb128 0x13
 2072 0143 00       		.byte	0
 2073 0144 00       		.byte	0
 2074 0145 12       		.uleb128 0x12
 2075 0146 01       		.uleb128 0x1
 2076 0147 01       		.byte	0x1
 2077 0148 49       		.uleb128 0x49
 2078 0149 13       		.uleb128 0x13
 2079 014a 01       		.uleb128 0x1
 2080 014b 13       		.uleb128 0x13
 2081 014c 00       		.byte	0
 2082 014d 00       		.byte	0
 2083 014e 13       		.uleb128 0x13
 2084 014f 21       		.uleb128 0x21
 2085 0150 00       		.byte	0
 2086 0151 49       		.uleb128 0x49
 2087 0152 13       		.uleb128 0x13
 2088 0153 2F       		.uleb128 0x2f
 2089 0154 0B       		.uleb128 0xb
 2090 0155 00       		.byte	0
 2091 0156 00       		.byte	0
 2092 0157 14       		.uleb128 0x14
 2093 0158 26       		.uleb128 0x26
 2094 0159 00       		.byte	0
 2095 015a 49       		.uleb128 0x49
 2096 015b 13       		.uleb128 0x13
 2097 015c 00       		.byte	0
 2098 015d 00       		.byte	0
 2099 015e 15       		.uleb128 0x15
 2100 015f 34       		.uleb128 0x34
 2101 0160 00       		.byte	0
 2102 0161 03       		.uleb128 0x3
 2103 0162 0E       		.uleb128 0xe
 2104 0163 3A       		.uleb128 0x3a
 2105 0164 0B       		.uleb128 0xb
 2106 0165 3B       		.uleb128 0x3b
 2107 0166 0B       		.uleb128 0xb
 2108 0167 49       		.uleb128 0x49
 2109 0168 13       		.uleb128 0x13
 2110 0169 3F       		.uleb128 0x3f
 2111 016a 19       		.uleb128 0x19
 2112 016b 02       		.uleb128 0x2
 2113 016c 18       		.uleb128 0x18
 2114 016d 00       		.byte	0
 2115 016e 00       		.byte	0
 2116 016f 00       		.byte	0
 2117              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 53


 2118 0000 A4000000 		.4byte	0xa4
 2119 0004 0200     		.2byte	0x2
 2120 0006 00000000 		.4byte	.Ldebug_info0
 2121 000a 04       		.byte	0x4
 2122 000b 00       		.byte	0
 2123 000c 0000     		.2byte	0
 2124 000e 0000     		.2byte	0
 2125 0010 00000000 		.4byte	.LFB0
 2126 0014 24000000 		.4byte	.LFE0-.LFB0
 2127 0018 00000000 		.4byte	.LFB1
 2128 001c A8010000 		.4byte	.LFE1-.LFB1
 2129 0020 00000000 		.4byte	.LFB2
 2130 0024 28000000 		.4byte	.LFE2-.LFB2
 2131 0028 00000000 		.4byte	.LFB3
 2132 002c 18000000 		.4byte	.LFE3-.LFB3
 2133 0030 00000000 		.4byte	.LFB4
 2134 0034 1C000000 		.4byte	.LFE4-.LFB4
 2135 0038 00000000 		.4byte	.LFB5
 2136 003c 1C000000 		.4byte	.LFE5-.LFB5
 2137 0040 00000000 		.4byte	.LFB6
 2138 0044 48000000 		.4byte	.LFE6-.LFB6
 2139 0048 00000000 		.4byte	.LFB7
 2140 004c 44000000 		.4byte	.LFE7-.LFB7
 2141 0050 00000000 		.4byte	.LFB8
 2142 0054 1C000000 		.4byte	.LFE8-.LFB8
 2143 0058 00000000 		.4byte	.LFB9
 2144 005c 30000000 		.4byte	.LFE9-.LFB9
 2145 0060 00000000 		.4byte	.LFB10
 2146 0064 2C000000 		.4byte	.LFE10-.LFB10
 2147 0068 00000000 		.4byte	.LFB11
 2148 006c 1C000000 		.4byte	.LFE11-.LFB11
 2149 0070 00000000 		.4byte	.LFB12
 2150 0074 1C000000 		.4byte	.LFE12-.LFB12
 2151 0078 00000000 		.4byte	.LFB13
 2152 007c 30000000 		.4byte	.LFE13-.LFB13
 2153 0080 00000000 		.4byte	.LFB14
 2154 0084 2C000000 		.4byte	.LFE14-.LFB14
 2155 0088 00000000 		.4byte	.LFB15
 2156 008c A4000000 		.4byte	.LFE15-.LFB15
 2157 0090 00000000 		.4byte	.LFB16
 2158 0094 98000000 		.4byte	.LFE16-.LFB16
 2159 0098 00000000 		.4byte	.LFB17
 2160 009c 80000000 		.4byte	.LFE17-.LFB17
 2161 00a0 00000000 		.4byte	0
 2162 00a4 00000000 		.4byte	0
 2163              		.section	.debug_ranges,"",%progbits
 2164              	.Ldebug_ranges0:
 2165 0000 00000000 		.4byte	.LFB0
 2166 0004 24000000 		.4byte	.LFE0
 2167 0008 00000000 		.4byte	.LFB1
 2168 000c A8010000 		.4byte	.LFE1
 2169 0010 00000000 		.4byte	.LFB2
 2170 0014 28000000 		.4byte	.LFE2
 2171 0018 00000000 		.4byte	.LFB3
 2172 001c 18000000 		.4byte	.LFE3
 2173 0020 00000000 		.4byte	.LFB4
 2174 0024 1C000000 		.4byte	.LFE4
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 54


 2175 0028 00000000 		.4byte	.LFB5
 2176 002c 1C000000 		.4byte	.LFE5
 2177 0030 00000000 		.4byte	.LFB6
 2178 0034 48000000 		.4byte	.LFE6
 2179 0038 00000000 		.4byte	.LFB7
 2180 003c 44000000 		.4byte	.LFE7
 2181 0040 00000000 		.4byte	.LFB8
 2182 0044 1C000000 		.4byte	.LFE8
 2183 0048 00000000 		.4byte	.LFB9
 2184 004c 30000000 		.4byte	.LFE9
 2185 0050 00000000 		.4byte	.LFB10
 2186 0054 2C000000 		.4byte	.LFE10
 2187 0058 00000000 		.4byte	.LFB11
 2188 005c 1C000000 		.4byte	.LFE11
 2189 0060 00000000 		.4byte	.LFB12
 2190 0064 1C000000 		.4byte	.LFE12
 2191 0068 00000000 		.4byte	.LFB13
 2192 006c 30000000 		.4byte	.LFE13
 2193 0070 00000000 		.4byte	.LFB14
 2194 0074 2C000000 		.4byte	.LFE14
 2195 0078 00000000 		.4byte	.LFB15
 2196 007c A4000000 		.4byte	.LFE15
 2197 0080 00000000 		.4byte	.LFB16
 2198 0084 98000000 		.4byte	.LFE16
 2199 0088 00000000 		.4byte	.LFB17
 2200 008c 80000000 		.4byte	.LFE17
 2201 0090 00000000 		.4byte	0
 2202 0094 00000000 		.4byte	0
 2203              		.section	.debug_line,"",%progbits
 2204              	.Ldebug_line0:
 2205 0000 3A020000 		.section	.debug_str,"MS",%progbits,1
 2205      02004E00 
 2205      00000201 
 2205      FB0E0D00 
 2205      01010101 
 2206              	.LASF28:
 2207 0000 4D6F746F 		.ascii	"MotorCurrentADC_StopConvert\000"
 2207      72437572 
 2207      72656E74 
 2207      4144435F 
 2207      53746F70 
 2208              	.LASF42:
 2209 001c 4D6F746F 		.ascii	"MotorCurrentADC_SetLimitMask\000"
 2209      72437572 
 2209      72656E74 
 2209      4144435F 
 2209      5365744C 
 2210              	.LASF19:
 2211 0039 72656733 		.ascii	"reg32\000"
 2211      3200
 2212              	.LASF25:
 2213 003f 4D6F746F 		.ascii	"MotorCurrentADC_Enable\000"
 2213      72437572 
 2213      72656E74 
 2213      4144435F 
 2213      456E6162 
 2214              	.LASF45:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 55


 2215 0056 6F666673 		.ascii	"offset\000"
 2215      657400
 2216              	.LASF15:
 2217 005d 666C6F61 		.ascii	"float\000"
 2217      7400
 2218              	.LASF41:
 2219 0063 68696768 		.ascii	"highLimit\000"
 2219      4C696D69 
 2219      7400
 2220              	.LASF39:
 2221 006d 6C6F774C 		.ascii	"lowLimit\000"
 2221      696D6974 
 2221      00
 2222              	.LASF52:
 2223 0076 75566F6C 		.ascii	"uVolts\000"
 2223      747300
 2224              	.LASF3:
 2225 007d 73686F72 		.ascii	"short unsigned int\000"
 2225      7420756E 
 2225      7369676E 
 2225      65642069 
 2225      6E7400
 2226              	.LASF27:
 2227 0090 4D6F746F 		.ascii	"MotorCurrentADC_StartConvert\000"
 2227      72437572 
 2227      72656E74 
 2227      4144435F 
 2227      53746172 
 2228              	.LASF56:
 2229 00ad 4D6F746F 		.ascii	"MotorCurrentADC_initVar\000"
 2229      72437572 
 2229      72656E74 
 2229      4144435F 
 2229      696E6974 
 2230              	.LASF30:
 2231 00c5 4D6F746F 		.ascii	"MotorCurrentADC_IsEndConversion\000"
 2231      72437572 
 2231      72656E74 
 2231      4144435F 
 2231      4973456E 
 2232              	.LASF29:
 2233 00e5 73746174 		.ascii	"status\000"
 2233      757300
 2234              	.LASF44:
 2235 00ec 4D6F746F 		.ascii	"MotorCurrentADC_SetOffset\000"
 2235      72437572 
 2235      72656E74 
 2235      4144435F 
 2235      5365744F 
 2236              	.LASF14:
 2237 0106 666C6F61 		.ascii	"float32\000"
 2237      74333200 
 2238              	.LASF22:
 2239 010e 746D7052 		.ascii	"tmpRegVal\000"
 2239      65675661 
 2239      6C00
 2240              	.LASF59:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 56


 2241 0118 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2241      4320342E 
 2241      382E3420 
 2241      32303134 
 2241      30353236 
 2242 014b 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2242      20726576 
 2242      6973696F 
 2242      6E203231 
 2242      31333538 
 2243 017e 30202D66 		.ascii	"0 -ffunction-sections\000"
 2243      66756E63 
 2243      74696F6E 
 2243      2D736563 
 2243      74696F6E 
 2244              	.LASF9:
 2245 0194 75696E74 		.ascii	"uint8\000"
 2245      3800
 2246              	.LASF55:
 2247 019a 4D6F746F 		.ascii	"MotorCurrentADC_channelsConfig\000"
 2247      72437572 
 2247      72656E74 
 2247      4144435F 
 2247      6368616E 
 2248              	.LASF1:
 2249 01b9 756E7369 		.ascii	"unsigned char\000"
 2249      676E6564 
 2249      20636861 
 2249      7200
 2250              	.LASF31:
 2251 01c7 4D6F746F 		.ascii	"MotorCurrentADC_GetResult16\000"
 2251      72437572 
 2251      72656E74 
 2251      4144435F 
 2251      47657452 
 2252              	.LASF12:
 2253 01e3 696E7431 		.ascii	"int16\000"
 2253      3600
 2254              	.LASF35:
 2255 01e9 4D6F746F 		.ascii	"MotorCurrentADC_Init\000"
 2255      72437572 
 2255      72656E74 
 2255      4144435F 
 2255      496E6974 
 2256              	.LASF53:
 2257 01fe 4D6F746F 		.ascii	"MotorCurrentADC_CountsTo_Volts\000"
 2257      72437572 
 2257      72656E74 
 2257      4144435F 
 2257      436F756E 
 2258              	.LASF13:
 2259 021d 696E7433 		.ascii	"int32\000"
 2259      3200
 2260              	.LASF43:
 2261 0223 4D6F746F 		.ascii	"MotorCurrentADC_SetSatMask\000"
 2261      72437572 
 2261      72656E74 
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 57


 2261      4144435F 
 2261      53657453 
 2262              	.LASF16:
 2263 023e 646F7562 		.ascii	"double\000"
 2263      6C6500
 2264              	.LASF48:
 2265 0245 4D6F746F 		.ascii	"MotorCurrentADC_CountsTo_mVolts\000"
 2265      72437572 
 2265      72656E74 
 2265      4144435F 
 2265      436F756E 
 2266              	.LASF46:
 2267 0265 4D6F746F 		.ascii	"MotorCurrentADC_SetGain\000"
 2267      72437572 
 2267      72656E74 
 2267      4144435F 
 2267      53657447 
 2268              	.LASF47:
 2269 027d 61646347 		.ascii	"adcGain\000"
 2269      61696E00 
 2270              	.LASF10:
 2271 0285 75696E74 		.ascii	"uint16\000"
 2271      313600
 2272              	.LASF49:
 2273 028c 61646343 		.ascii	"adcCounts\000"
 2273      6F756E74 
 2273      7300
 2274              	.LASF11:
 2275 0296 75696E74 		.ascii	"uint32\000"
 2275      333200
 2276              	.LASF51:
 2277 029d 4D6F746F 		.ascii	"MotorCurrentADC_CountsTo_uVolts\000"
 2277      72437572 
 2277      72656E74 
 2277      4144435F 
 2277      436F756E 
 2278              	.LASF5:
 2279 02bd 6C6F6E67 		.ascii	"long unsigned int\000"
 2279      20756E73 
 2279      69676E65 
 2279      6420696E 
 2279      7400
 2280              	.LASF8:
 2281 02cf 756E7369 		.ascii	"unsigned int\000"
 2281      676E6564 
 2281      20696E74 
 2281      00
 2282              	.LASF38:
 2283 02dc 4D6F746F 		.ascii	"MotorCurrentADC_SetLowLimit\000"
 2283      72437572 
 2283      72656E74 
 2283      4144435F 
 2283      5365744C 
 2284              	.LASF23:
 2285 02f8 636F756E 		.ascii	"counts\000"
 2285      747300
 2286              	.LASF7:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 58


 2287 02ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 2287      206C6F6E 
 2287      6720756E 
 2287      7369676E 
 2287      65642069 
 2288              	.LASF34:
 2289 0316 72657375 		.ascii	"result\000"
 2289      6C7400
 2290              	.LASF24:
 2291 031d 4D6F746F 		.ascii	"MotorCurrentADC_Start\000"
 2291      72437572 
 2291      72656E74 
 2291      4144435F 
 2291      53746172 
 2292              	.LASF26:
 2293 0333 4D6F746F 		.ascii	"MotorCurrentADC_Stop\000"
 2293      72437572 
 2293      72656E74 
 2293      4144435F 
 2293      53746F70 
 2294              	.LASF54:
 2295 0348 766F6C74 		.ascii	"volts\000"
 2295      7300
 2296              	.LASF33:
 2297 034e 6368616E 		.ascii	"chan\000"
 2297      00
 2298              	.LASF50:
 2299 0353 6D566F6C 		.ascii	"mVolts\000"
 2299      747300
 2300              	.LASF20:
 2301 035a 73697A65 		.ascii	"sizetype\000"
 2301      74797065 
 2301      00
 2302              	.LASF6:
 2303 0363 6C6F6E67 		.ascii	"long long int\000"
 2303      206C6F6E 
 2303      6720696E 
 2303      7400
 2304              	.LASF58:
 2305 0371 4D6F746F 		.ascii	"MotorCurrentADC_countsPer10Volt\000"
 2305      72437572 
 2305      72656E74 
 2305      4144435F 
 2305      636F756E 
 2306              	.LASF37:
 2307 0391 6D61736B 		.ascii	"mask\000"
 2307      00
 2308              	.LASF21:
 2309 0396 63684E75 		.ascii	"chNum\000"
 2309      6D00
 2310              	.LASF60:
 2311 039c 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\MotorCurrentADC.c\000"
 2311      6E657261 
 2311      7465645F 
 2311      536F7572 
 2311      63655C50 
 2312              	.LASF32:
ARM GAS  C:\Users\Sam\AppData\Local\Temp\ccNgFqrC.s 			page 59


 2313 03c7 7265744D 		.ascii	"retMode\000"
 2313      6F646500 
 2314              	.LASF61:
 2315 03cf 433A5C55 		.ascii	"C:\\Users\\Sam\\OneDrive\\Github\\PSoC-4-Motor-Cont"
 2315      73657273 
 2315      5C53616D 
 2315      5C4F6E65 
 2315      44726976 
 2316 03fd 726F6C6C 		.ascii	"roller\\PSoC 4 Encoder Modbus Slave.cydsn\000"
 2316      65725C50 
 2316      536F4320 
 2316      3420456E 
 2316      636F6465 
 2317              	.LASF2:
 2318 0426 73686F72 		.ascii	"short int\000"
 2318      7420696E 
 2318      7400
 2319              	.LASF40:
 2320 0430 4D6F746F 		.ascii	"MotorCurrentADC_SetHighLimit\000"
 2320      72437572 
 2320      72656E74 
 2320      4144435F 
 2320      53657448 
 2321              	.LASF57:
 2322 044d 4D6F746F 		.ascii	"MotorCurrentADC_offset\000"
 2322      72437572 
 2322      72656E74 
 2322      4144435F 
 2322      6F666673 
 2323              	.LASF36:
 2324 0464 4D6F746F 		.ascii	"MotorCurrentADC_SetChanMask\000"
 2324      72437572 
 2324      72656E74 
 2324      4144435F 
 2324      53657443 
 2325              	.LASF4:
 2326 0480 6C6F6E67 		.ascii	"long int\000"
 2326      20696E74 
 2326      00
 2327              	.LASF18:
 2328 0489 63686172 		.ascii	"char\000"
 2328      00
 2329              	.LASF0:
 2330 048e 7369676E 		.ascii	"signed char\000"
 2330      65642063 
 2330      68617200 
 2331              	.LASF17:
 2332 049a 696E7436 		.ascii	"int64\000"
 2332      3400
 2333              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
